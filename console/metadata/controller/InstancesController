{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "InstancesController",
        "id": "InstancesController"
    },
    "designerId": "5cd58917-0a0f-4f09-a3c7-ada96dc3897c",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#instancesGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onInstancesGridSelect",
                "implHandler": [
                    "",
                    "//Instances Grid Item Click",
                    "",
                    "if(instancesConstants.selectRow == null || instancesConstants.selectRow.get(\"machineId\") != record.get(\"machineId\")) {",
                    "",
                    "    instancesConstants.selectRow = record;",
                    "",
                    "    this.selectInstanceGrid();",
                    "}",
                    ""
                ],
                "name": "cellclick",
                "scope": "me"
            },
            "designerId": "7cc8272e-956b-44cd-811f-60f601258eaf"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#instancesGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onInstancesGridBeforeItemContextMenu",
                "implHandler": [
                    "//Instaces Grid Right Click Menu 호출",
                    "",
                    "var position = e.getXY();",
                    "e.stopEvent();",
                    "",
                    "instancesConstants.actionRow = record;",
                    "",
                    "var menu = instancesConstants.contextMenu;",
                    "var status = record.get(\"status\");",
                    "var os = Ext.util.Format.lowercase(record.get(\"osName\"));",
                    "",
                    "menu.items.each(function( item ) {",
                    "",
                    "    if(item.text != 'Edit Instance') {",
                    "            ",
                    "        if(os.indexOf('linux') >= 0) {",
                    "    ",
                    "            if(status == 'Running') {",
                    "                ",
                    "                if(item.text == 'Agent Start') {",
                    "                    item.setDisabled(true);",
                    "                } else {",
                    "                    item.setDisabled(false);",
                    "                }",
                    "                ",
                    "            } else {",
                    "                ",
                    "                if(item.text == 'Agent Start') {",
                    "                    item.setDisabled(false);",
                    "                } else {",
                    "                    item.setDisabled(true);",
                    "                }",
                    "            }",
                    "            ",
                    "        } else {",
                    "            item.setDisabled(true);",
                    "        }",
                    "        ",
                    "    }",
                    "",
                    "});",
                    "",
                    "menu.showAt(position);"
                ],
                "name": "beforeitemcontextmenu",
                "scope": "me"
            },
            "designerId": "27b3cbb8-bae5-4563-9928-26f2f79e396d"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "init",
                "implHandler": [
                    "//Instances Menu Config Setting",
                    "",
                    "var instances = this;",
                    "",
                    "var instancesGridContextMenu = new Ext.menu.Menu({",
                    "    items:",
                    "    [",
                    "",
                    "        { text: 'CLI(Command Line Interface)',",
                    "         handler: function() {",
                    "             instances.showCLIWindow();",
                    "         }",
                    "        },",
                    "        { text: 'Edit Instance',",
                    "         handler: function() {",
                    "             instances.showEditInstanceWindow();",
                    "         }",
                    "        },",
                    "        { text: 'Agent Start',",
                    "         handler: function() {",
                    "             instances.controlAgent('Start');",
                    "         }",
                    "        },",
                    "        { text: 'Agent Stop',",
                    "         handler: function() {",
                    "             instances.controlAgent('Stop');",
                    "         }",
                    "        },",
                    "        { text: 'Manage Group',",
                    "         handler: function() {",
                    "             instances.showManageGroupWindow();",
                    "         }",
                    "        },",
                    "        { text: 'Manage Account',",
                    "         handler: function() {",
                    "             instances.showManageAccountWindow();",
                    "         }",
                    "        },",
                    "        { text: 'Edit Fstab',",
                    "         handler: function() {",
                    "             instances.showFstabWindow();",
                    "         }",
                    "        },",
                    "        { text: 'Edit Crontab',",
                    "         handler: function() {",
                    "             instances.showCrontabWindow();",
                    "         }",
                    "        }",
                    "    ]",
                    "",
                    "});",
                    "",
                    "//Instances Menu Constants",
                    "Ext.define('instancesConstants', {",
                    "    singleton: true,",
                    "    me : instances,",
                    "    chartInterval : null,",
                    "    contextMenu: instancesGridContextMenu,",
                    "    selectRow : null,",
                    "    actionRow : null",
                    "});",
                    ""
                ]
            },
            "designerId": "ea573774-ed5d-4172-b001-7416fd3dfee2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "initInstance",
                "implHandler": [
                    "//RHEVM Combo Menu setting",
                    "",
                    "var rhevmCycle = Ext.getCmp(\"rhevmCycle\").menu;",
                    "var menuItems = rhevmCycle.items;",
                    "",
                    "",
                    "for(var idx = menuItems.length; idx >= 0; idx--) {",
                    "    menuItems.removeAt(idx);",
                    "}",
                    "",
                    "rhevmCycle.add({",
                    "    xtype: 'menucheckitem',",
                    "    code: '',",
                    "    text: 'All RHEV Manager',",
                    "    group : 'rhevm',",
                    "    checked : true",
                    "});",
                    "",
                    "var comboStore = Ext.getStore(\"ComboHypervisorStore\");",
                    "comboStore.load();",
                    "",
                    "comboStore.each(function (record, index) {",
                    "",
                    "    rhevmCycle.add({",
                    "        xtype: 'menucheckitem',",
                    "        code: record.get(\"hypervisorId\"),",
                    "        text: record.get(\"rhevmName\"),",
                    "        group : 'rhevm'",
                    "    });",
                    "",
                    "});",
                    "rhevmCycle.doLayout();",
                    ""
                ]
            },
            "designerId": "9cd77e00-7157-4b90-a8ce-89bfb9e5cb96"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "init"
                ],
                "fn": "searchInstance",
                "implHandler": [
                    "",
                    "//Instances Grid Data Search",
                    "",
                    "if(init) {",
                    "    Ext.getCmp(\"searchCategory\").setValue(\"\");",
                    "    Ext.getCmp(\"searchRhevm\").setValue(\"\");",
                    "    Ext.getCmp(\"searchInstanceName\").setValue(\"\");",
                    "",
                    "    Ext.getCmp(\"instancesGrid\").reconfigure(Ext.getCmp(\"instancesGrid\").store, Ext.getCmp(\"instancesGrid\").initialConfig.columns);",
                    "}",
                    "",
                    "clearInterval(instancesConstants.chartInterval);",
                    "",
                    "instancesConstants.selectRow = null;",
                    "",
                    "var instanceStore = Ext.getCmp(\"instancesGrid\").getStore();",
                    "",
                    "instanceStore.getProxy().extraParams = {",
                    "    isPrd : Ext.getCmp(\"searchCategory\").getRawValue(),",
                    "    hypervisorId : Ext.getCmp(\"searchRhevm\").getRawValue(),",
                    "    displayName : Ext.getCmp(\"searchInstanceName\").getRawValue()",
                    "};",
                    "",
                    "instanceStore.load();",
                    "",
                    "var detailPanel = Ext.getCmp(\"instanceDetailPanel\");",
                    "detailPanel.layout.setActiveItem(0);"
                ]
            },
            "designerId": "be575cdc-0f2c-4d5a-9046-e8371787c032"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "selectInstanceGrid",
                "implHandler": [
                    "//Instance Detail 조회",
                    "",
                    "var detailPanel = Ext.getCmp(\"instanceDetailPanel\");",
                    "detailPanel.layout.setActiveItem(1);",
                    "",
                    "Ext.getCmp(\"instanceTabPanel\").setActiveTab(0);",
                    "",
                    "this.searchInstanceDetail(0);"
                ]
            },
            "designerId": "0372f274-cbef-437a-a6af-952e7cbe8bd3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "tabIndex"
                ],
                "fn": "searchInstanceDetail",
                "implHandler": [
                    "",
                    "//Instance Detail 조회(Tab 별)",
                    "",
                    "/*",
                    "//init clear",
                    "clearInterval(instancesConstants.chartInterval);",
                    "Ext.getStore(\"instanceMonitoringChartStore\").removeAll();",
                    "",
                    "*/",
                    "",
                    "if(tabIndex == 0) {",
                    "",
                    "    //Description Data Loading",
                    "    var descform = Ext.getCmp(\"instanceDescForm\");",
                    "",
                    "    descform.getForm().reset();",
                    "",
                    "    descform.getForm().waitMsgTarget = descform.getEl();",
                    "",
                    "    descform.getForm().load({",
                    "        params : {",
                    "            machineId : instancesConstants.selectRow.get(\"machineId\")",
                    "        }",
                    "        ,url : GLOBAL.urlPrefix + \"machine/getMachine\"",
                    "        ,waitMsg:'Loading...'",
                    "    });",
                    "",
                    "",
                    "} else if(tabIndex == 1) {",
                    "",
                    "    //Software Data Loading",
                    "    var softwareGrid = Ext.getCmp('instanceSoftwareGrid');",
                    "",
                    "    softwareGrid.getStore().load({",
                    "        params:{",
                    "            instanceID : record.get(\"instanceID\")",
                    "        }",
                    "    });",
                    "",
                    "} else if(tabIndex == 2) {",
                    "",
                    "    //OS Package Data Loading",
                    "    this.searchInstanceOs();",
                    "",
                    "} else {",
                    "",
                    "    //Monitoring Data Loading",
                    "",
                    "    instancesConstants.chartInterval = setInterval(function() {",
                    "",
                    "    var chartStore = Ext.getStore(\"instanceMonitoringChartStore\");",
                    "        chartStore.load({",
                    "            addRecords : true",
                    "        });",
                    "",
                    "        if(chartStore.getCount() > 30) {",
                    "            chartStore.remove(chartStore.getAt(0));",
                    "        }",
                    "",
                    "    }, 5000);",
                    "}",
                    "",
                    ""
                ]
            },
            "designerId": "8272ec8b-798d-449e-baa5-0d53e818543e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "searchInstanceOs",
                "implHandler": [
                    "//Instances Os Package Grid Data Search",
                    "",
                    "var packageStore = Ext.getCmp('instanceOsGrid').getStore();",
                    "",
                    "packageStore.getProxy().extraParams = {",
                    "    machineId : instancesConstants.selectRow.get(\"machineId\"),",
                    "    name : Ext.getCmp(\"searchPackageName\").getRawValue()",
                    "};",
                    "",
                    "packageStore.load();",
                    ""
                ]
            },
            "designerId": "95ae4b48-6781-48b0-889b-b0b3dd10284c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "reloadInstanceOs",
                "implHandler": [
                    "//Instance Os Reload",
                    "",
                    "if(instancesConstants.selectRow.get(\"status\") != 'Running') {",
                    "",
                    "    Ext.MessageBox.alert('Message', 'Instance의 Agent가 Running일 경우에만 재수집이 가능합니다.');",
                    "    return;",
                    "",
                    "}",
                    "",
                    "Ext.MessageBox.confirm('Confirm', 'OS Package 재수집은 최대 수분의 시간이 소요됩니다.<br/>재수집 하시겠습니까?', function(btn){",
                    "",
                    "    if(btn == \"yes\"){",
                    "",
                    "        Ext.Ajax.request({",
                    "            url: GLOBAL.urlPrefix + \"package/reload\",",
                    "            params : {",
                    "                machineId : instancesConstants.selectRow.get(\"machineId\")",
                    "            },",
                    "            disableCaching : true,",
                    "            waitMsg: 'Package Reload...',",
                    "            timeout: 300000,",
                    "            success: function(response){",
                    "                var msg = Ext.JSON.decode(response.responseText).msg;",
                    "                Ext.MessageBox.alert('알림', msg);",
                    "",
                    "                Ext.getCmp(\"instanceOsGrid\").getStore().reload();",
                    "",
                    "            }",
                    "        });",
                    "    }",
                    "",
                    "});",
                    ""
                ]
            },
            "designerId": "a9623850-8578-4c2a-8375-cffa50ea780a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showCLIWindow",
                "implHandler": [
                    "//CLI Popup 호출",
                    "",
                    "var CLIWindow = Ext.create(\"widget.CLIWindow\");",
                    "CLIWindow.show();",
                    "",
                    "Ext.getCmp(\"cliForm\").getForm().findField(\"machineId\").setRawValue(instancesConstants.actionRow.get(\"machineId\"));",
                    ""
                ]
            },
            "designerId": "b4fd2fc9-3ff7-405c-b736-7d4c1e61667f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showManageAccountWindow",
                "implHandler": [
                    "//Manage Account Popup 호출",
                    "",
                    "var manageAccountWindow = Ext.create(\"widget.ManageAccountWindow\");",
                    "manageAccountWindow.show();",
                    "",
                    "var accountStore = Ext.getCmp('instanceAccountGrid').getStore();",
                    "",
                    "accountStore.getProxy().extraParams = {",
                    "    machineId : instancesConstants.actionRow.get(\"machineId\")",
                    "};",
                    "",
                    "accountStore.load();",
                    ""
                ]
            },
            "designerId": "daee12f1-ab4e-404a-ad90-f7c93442ca26"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showManageGroupWindow",
                "implHandler": [
                    "//Manage Group Popup 호출",
                    "",
                    "var manageGroupWindow = Ext.create(\"widget.ManageGroupWindow\");",
                    "manageGroupWindow.show();",
                    "",
                    "var groupStore = Ext.getCmp('instanceGroupGrid').getStore();",
                    "",
                    "groupStore.getProxy().extraParams = {",
                    "    machineId : instancesConstants.actionRow.get(\"machineId\")",
                    "};",
                    "",
                    "groupStore.load();",
                    ""
                ]
            },
            "designerId": "4f682021-2456-4019-a927-ffcb33b0ad74"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showFstabWindow",
                "implHandler": [
                    "//Fstab Popup 호출",
                    "",
                    "var fstabWindow = Ext.create(\"widget.FstabWindow\");",
                    "fstabWindow.show();",
                    "",
                    "var fstabForm = Ext.getCmp(\"fstabForm\");",
                    "",
                    "fstabForm.getForm().reset();",
                    "",
                    "fstabForm.getForm().waitMsgTarget = fstabForm.getEl();",
                    "",
                    "fstabForm.getForm().load({",
                    "    params : {",
                    "        machineId : instancesConstants.actionRow.get(\"machineId\")",
                    "    }",
                    "    ,url : GLOBAL.urlPrefix + \"machine/getFstab\"",
                    "    ,waitMsg:'Loading...'",
                    "    ,success: function(form, action) {",
                    "",
                    "        form.findField('machineId').setValue(instancesConstants.actionRow.get(\"machineId\"));",
                    "        form.findField('contents').setValue(action.result.data);",
                    "    }",
                    "});"
                ]
            },
            "designerId": "9a19ef90-d375-4e2a-881b-ac4439926add"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showCrontabWindow",
                "implHandler": [
                    "//Crontab Popup 호출",
                    "",
                    "var crontabWindow = Ext.create(\"widget.CrontabWindow\");",
                    "",
                    "crontabWindow.show();",
                    "",
                    "Ext.getCmp(\"crontabForm\").getForm().findField('machineId').setValue(instancesConstants.actionRow.get(\"machineId\"));",
                    "",
                    "var accountStore = Ext.getStore(\"ComboAccountStore\");",
                    "accountStore.getProxy().extraParams = {",
                    "    machineId : instancesConstants.actionRow.get(\"machineId\")",
                    "};",
                    ""
                ]
            },
            "designerId": "2ccd2a67-191e-4df8-9930-cf9db429afe2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#categoryCycle menuitem",
                "designer|targetType": "Ext.menu.CheckItem",
                "fn": "onCategoryCycleClick",
                "implHandler": [
                    "// Category Menu Click",
                    "if(Ext.getCmp(\"searchCategory\").getRawValue() != item.getId()) {",
                    "",
                    "    if(item.getId() == 'production') {",
                    "        Ext.getCmp(\"searchCategory\").setRawValue(\"Y\");",
                    "",
                    "    } else if(item.getId() == 'development') {",
                    "",
                    "        Ext.getCmp(\"searchCategory\").setRawValue(\"N\");",
                    "",
                    "    } else {",
                    "",
                    "        Ext.getCmp(\"searchCategory\").setRawValue(\"\");",
                    "",
                    "    }",
                    "",
                    "    this.searchInstance();",
                    "}",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "5801d9c7-a705-404c-be19-3c8480fa1cef"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#rhevmCycle menuitem",
                "designer|targetType": "Ext.menu.CheckItem",
                "fn": "onRhevmCycleClick",
                "implHandler": [
                    "//RHEVM Menu Click",
                    "",
                    "if(Ext.getCmp(\"searchRhevm\").getRawValue() != item.code) {",
                    "",
                    "    Ext.getCmp(\"searchRhevm\").setRawValue(item.code);",
                    "",
                    "    this.searchInstance();",
                    "}",
                    "",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "54ff767f-c05d-4e42-99c7-7f3c41ce6beb"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#searchInstanceName",
                "designer|targetType": "Ext.form.field.Text",
                "fn": "onSearchInstanceNameKeydown",
                "implHandler": [
                    "//Instance Name Search",
                    "if(e.getKey() == e.ENTER){",
                    "    this.searchInstance();",
                    "}"
                ],
                "name": "keydown",
                "scope": "me"
            },
            "designerId": "a68b97d7-00d3-47e8-b111-d5db205fb7ac"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#searchPackageName",
                "designer|targetType": "Ext.form.field.Text",
                "fn": "onSearchPackageNameKeydown",
                "implHandler": [
                    "//Instance Package Name Search",
                    "if(e.getKey() == e.ENTER){",
                    "    this.searchInstanceOs();",
                    "}"
                ],
                "name": "keydown",
                "scope": "me"
            },
            "designerId": "e1235ba0-220b-4a6b-90f5-111f8f653343"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#instanceTabPanel",
                "designer|targetType": "Ext.tab.Panel",
                "fn": "onInstanceTabPanelTabChange",
                "implHandler": [
                    "",
                    "if(newCard.title == \"Description\"){",
                    "",
                    "    this.searchInstanceDetail(0);",
                    "",
                    "} else if(newCard.title == \"Software\"){",
                    "",
                    "} else if(newCard.title == \"OS Package\"){",
                    "",
                    "    Ext.getCmp(\"searchPackageName\").setValue(\"\");",
                    "    Ext.getCmp(\"instanceOsGrid\").reconfigure(Ext.getCmp(\"instanceOsGrid\").store, Ext.getCmp(\"instanceOsGrid\").initialConfig.columns);",
                    "",
                    "    this.searchInstanceDetail(2);",
                    "",
                    "} else {",
                    "",
                    "    this.viewInstanceMonitoring();",
                    "    ",
                    "    instancesConstants.chartInterval = setInterval(function() {",
                    "        instancesConstants.me.viewInstanceMonitoring();",
                    "    }, 60000);",
                    "",
                    "}"
                ],
                "name": "tabchange",
                "scope": "me"
            },
            "designerId": "888cc8ad-8dd2-47e5-85c7-9da718030c7e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showEditInstanceWindow",
                "implHandler": [
                    "//Instance Edit Popup 호출",
                    "",
                    "var editWindow = Ext.create(\"widget.EditInstanceWindow\");",
                    "editWindow.show();",
                    "",
                    "var instanceForm = Ext.getCmp(\"editInstanceForm\");",
                    "",
                    "instanceForm.getForm().waitMsgTarget = instanceForm.getEl();",
                    "",
                    "instanceForm.getForm().load({",
                    "    params : {",
                    "        machineId : instancesConstants.actionRow.get(\"machineId\")",
                    "    }",
                    "    ,url : GLOBAL.urlPrefix + \"machine/getMachine\"",
                    "    ,waitMsg:'Loading...'",
                    "    ,success: function(form, action) {",
                    "",
                    "        var password = form.findField('sshPassword').getValue();",
                    "",
                    "        form.findField('confirmSshPassword').setRawValue(password);",
                    "",
                    "        if(form.findField('sshKeyFile').getValue() != '') {",
                    "            Ext.getCmp('chkUseGroup').items.items[1].setValue(true);",
                    "        } else {",
                    "            Ext.getCmp('chkUseGroup').items.items[0].setValue(true);",
                    "        }",
                    "",
                    "",
                    "    }",
                    "});"
                ]
            },
            "designerId": "48f17ebb-eef5-42e4-aa50-c5bad6d1292a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "executeInstanceCLI",
                "implHandler": [
                    "//CLI Comment Execute",
                    "",
                    "var cliForm = Ext.getCmp(\"cliForm\");",
                    "",
                    "cliForm.getForm().submit({",
                    "    clientValidation: true,",
                    "    url: GLOBAL.urlPrefix + \"machine/cli\",",
                    "    method : \"POST\",",
                    "    params: {",
                    "        newStatus: 'delivered'",
                    "    },",
                    "    waitMsg: 'Processing...',",
                    "    success: function(form, action) {",
                    "",
                    "        Ext.getCmp(\"cliOutputForm\").getForm().findField(\"inputCLIOutput\").setValue(action.result.data);",
                    "",
                    "    },",
                    "    failure: function(form, action) {",
                    "        switch (action.failureType) {",
                    "            case Ext.form.action.Action.CLIENT_INVALID:",
                    "                Ext.Msg.alert('Failure', '유효하지 않은 입력값이 존재합니다.');",
                    "                break;",
                    "            case Ext.form.action.Action.CONNECT_FAILURE:",
                    "                Ext.Msg.alert('Failure', 'Server communication failed');",
                    "                break;",
                    "            case Ext.form.action.Action.SERVER_INVALID:",
                    "                Ext.Msg.alert('Failure', action.result.msg);",
                    "        }",
                    "    }",
                    "});"
                ]
            },
            "designerId": "04692bd8-5cbf-43bf-927d-6747b0833a62"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "status"
                ],
                "fn": "controlAgent",
                "implHandler": [
                    "//Agent Status Controll",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.urlPrefix + \"machine/getMachine\",",
                    "    params : {",
                    "        machineId : instancesConstants.actionRow.get(\"machineId\")",
                    "    },",
                    "    disableCaching : true,",
                    "    waitMsg: status + ' Check Agent Status...',",
                    "    success: function(response){",
                    "",
                    "        var data = Ext.decode(response.responseText).data;",
                    "",
                    "        if(data.sshPort != null && data.sshUsername != null && ( data.sshPassword != null || data.sshKeyFile != null ) ) {",
                    "",
                    "            var controlUrl = 'machine/agentStart';",
                    "            if(status == 'Stop') {",
                    "                controlUrl = 'machine/agentStop';",
                    "            }",
                    "",
                    "            Ext.MessageBox.confirm('Confirm', 'Agent를 ' + status + '하시겠습니까?', function(btn){",
                    "",
                    "                if(btn == \"yes\"){",
                    "",
                    "                    Ext.Ajax.request({",
                    "                        url: GLOBAL.urlPrefix + controlUrl,",
                    "                        params : {",
                    "                            machineId : instancesConstants.actionRow.get(\"machineId\")",
                    "                        },",
                    "                        disableCaching : true,",
                    "                        waitMsg: status + ' Agent...',",
                    "                        success: function(response){",
                    "                            var msg = Ext.JSON.decode(response.responseText).msg;",
                    "                            Ext.MessageBox.alert('알림', msg);",
                    "",
                    "                            Ext.getCmp('instancesGrid').getStore().reload();",
                    "                        }",
                    "                    });",
                    "                }",
                    "",
                    "            });",
                    "",
                    "        } else {",
                    "",
                    "            Ext.MessageBox.alert('알림', '설정된 SSH 관련 정보가 없습니다. Edit Instance 메뉴에서 수정하십시오. ');",
                    "        }",
                    "",
                    "    }",
                    "});",
                    "",
                    ""
                ]
            },
            "designerId": "50d8116a-3865-4069-bc82-458cce8037f2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "viewInstanceMonitoring",
                "implHandler": [
                    "",
                    "//Instance Chart View",
                    "",
                    "Ext.Ajax.request({",
                    "    url: GLOBAL.urlPrefix + \"monitor/factor_list\",",
                    "    params : {",
                    "        includeAll : \"Y\"",
                    "    },",
                    "    disableCaching : true,",
                    "    waitMsg: status + ' Check Agent Status...',",
                    "    success: function(response){",
                    "",
                    "        columnData = Ext.decode(response.responseText).list;",
                    "        Ext.each(columnData, function(data, idx) {",
                    "            if(data.monFactorId == \"FACTOR_001\") {",
                    "                Ext.getCmp(\"chartCpuLabel\").setText(\"CPU (\"+ data.monFactorUnit +\")\");",
                    "            }",
                    "            if(data.monFactorId == \"FACTOR_004\") {",
                    "                Ext.getCmp(\"chartMemoryLabel\").setText(\"Memory (\"+ data.monFactorUnit +\")\");",
                    "            }",
                    "            if(data.monFactorId == \"FACTOR_006\") {",
                    "                Ext.getCmp(\"chartDiskLabel\").setText(\"Disk (\"+ data.monFactorUnit +\")\");",
                    "            }",
                    "",
                    "        });",
                    "",
                    "",
                    "        var chartStore = Ext.getStore(\"InstanceMonitoringStore\");",
                    "        chartStore.getProxy().extraParams = {",
                    "            machineId : instancesConstants.selectRow.get(\"machineId\")",
                    "        };",
                    "",
                    "",
                    "        var diskColumns = [];",
                    "",
                    "        chartStore.load({",
                    "            callback : function(records, options, success) {",
                    "",
                    "                Ext.each(records, function(record, index) {",
                    "",
                    "                    var diskCol = record.get(\"FACTOR_006\").split(\",\");",
                    "",
                    "                    Ext.each(diskCol, function (col) {",
                    "",
                    "                        var diskData = col.split(\":\");",
                    "                        var flag = true;",
                    "                        Ext.each(diskColumns, function(disk, diskIdx) {",
                    "",
                    "                           if(disk == diskData[0])  {",
                    "",
                    "                               record.set(\"DISK_\"+(diskIdx+1), diskData[1]);",
                    "",
                    "                               flag = false;",
                    "                               return false;",
                    "",
                    "                           }",
                    "",
                    "                        });",
                    "",
                    "                        if(flag) {",
                    "                            diskColumns.push(diskData[0]);",
                    "",
                    "                            record.set(\"DISK_\"+(diskColumns.length), diskData[1]);",
                    "                        }",
                    "                        test = diskData[1];",
                    "                    });",
                    "",
                    "                });",
                    "",
                    "                var chartSeries = Ext.getCmp('diskChart').series;",
                    "",
                    "                for(var i=0;i<10;i++) {",
                    "",
                    "                    if(i < diskColumns.length) {",
                    "                        chartSeries.getAt(i).showAll();",
                    "                        chartSeries.getAt(i).showInLegend = true;",
                    "                        chartSeries.getAt(i).showMarkers = true;",
                    "",
                    "                        chartSeries.getAt(i).setTitle(diskColumns[i]);",
                    "",
                    "                    } else {",
                    "                        chartSeries.getAt(i).hideAll();",
                    "                        chartSeries.getAt(i).showInLegend = false;",
                    "                        chartSeries.getAt(i).showMarkers = false;",
                    "                    }",
                    "                }",
                    "",
                    "            }",
                    "        });",
                    "",
                    "    }",
                    "});",
                    "var monitoringChartWindow = Ext.create(\"widget.monitoringChartWindow\");",
                    "",
                    "monitoringChartWindow.show();"
                ]
            },
            "designerId": "798a979a-2268-44a3-8fc7-b1d75f1f7096"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "type"
                ],
                "fn": "viewInstanceMonitoringPopup",
                "implHandler": [
                    "",
                    "//Instance Chart Popup",
                    "",
                    "if(type) {",
                    "",
                    "    var monitoringChartWindow = Ext.create(\"widget.MonitoringChartWindow\");",
                    "",
                    "    monitoringChartWindow.show();",
                    "",
                    "    if(type == 'cpu') {",
                    "",
                    "        Ext.getCmp(\"chartPanel\").layout.setActiveItem(0);",
                    "        monitoringChartWindow.setTitle(\"CPU\");",
                    "",
                    "    } else if(type == 'memory') {",
                    "",
                    "        Ext.getCmp(\"chartPanel\").layout.setActiveItem(1);",
                    "        monitoringChartWindow.setTitle(\"Memory\");",
                    "",
                    "    } else if(type == 'disk') {",
                    "",
                    "        Ext.getCmp(\"chartPanel\").layout.setActiveItem(2);",
                    "        monitoringChartWindow.setTitle(\"Disk\");",
                    "    }",
                    "",
                    "    Ext.getCmp(\"comboTimeRange\").setValue(\"\");",
                    "    Ext.getCmp(\"comboTimePeriod\").setValue(\"\");",
                    "    Ext.getCmp(\"instanceMonitoringType\").setValue(type);",
                    "",
                    "} else {",
                    "    type = Ext.getCmp(\"instanceMonitoringType\").getValue();",
                    "}",
                    "",
                    "var chartStore = Ext.getStore(\"MonitoringPopupStore\");",
                    "",
                    "chartStore.getProxy().extraParams = {",
                    "    machineId : instancesConstants.selectRow.get(\"machineId\"),",
                    "    timeRange : Ext.getCmp(\"comboTimeRange\").getValue(),",
                    "    period    : Ext.getCmp(\"comboTimePeriod\").getValue()",
                    "};",
                    "",
                    "",
                    "var diskColumns = [];",
                    "",
                    "chartStore.load({",
                    "    callback : function(records, options, success) {",
                    "",
                    "        if(type == 'disk') {",
                    "            Ext.each(records, function(record, index) {",
                    "",
                    "                var diskCol = record.get(\"FACTOR_006\").split(\",\");",
                    "",
                    "                Ext.each(diskCol, function (col) {",
                    "",
                    "                    var diskData = col.split(\":\");",
                    "                    var flag = true;",
                    "                    Ext.each(diskColumns, function(disk, diskIdx) {",
                    "",
                    "                        if(disk == diskData[0])  {",
                    "",
                    "                            record.set(\"DISK_\"+(diskIdx+1), diskData[1]);",
                    "",
                    "                            flag = false;",
                    "                            return false;",
                    "",
                    "                        }",
                    "",
                    "                    });",
                    "",
                    "                    if(flag) {",
                    "                        diskColumns.push(diskData[0]);",
                    "",
                    "                        record.set(\"DISK_\"+(diskColumns.length), diskData[1]);",
                    "                    }",
                    "                    test = diskData[1];",
                    "                });",
                    "",
                    "            });",
                    "",
                    "            var chartSeries = Ext.getCmp('popDiskChart').series;",
                    "",
                    "            for(var i=0;i<10;i++) {",
                    "",
                    "                if(i < diskColumns.length) {",
                    "                    chartSeries.getAt(i).showAll();",
                    "                    chartSeries.getAt(i).showInLegend = true;",
                    "                    chartSeries.getAt(i).showMarkers = true;",
                    "",
                    "                    chartSeries.getAt(i).setTitle(diskColumns[i]);",
                    "",
                    "                } else {",
                    "                    chartSeries.getAt(i).hideAll();",
                    "                    chartSeries.getAt(i).showInLegend = false;",
                    "                    chartSeries.getAt(i).showMarkers = false;",
                    "                }",
                    "            }",
                    "",
                    "        }",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "0608640b-9ecf-4e6c-8414-9737fb514b7c"
        }
    ]
}