/*
 * File: app/controller/RHEVMController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.RHEVMController', {
    extend: 'Ext.app.Controller',

    onHypervisorRender: function(component, eOpts) {
        //hypervisor Grid Data Search
        Ext.getCmp("hypervisorGrid").getStore().load();

        var detailPanel = Ext.getCmp("rhevmDetailPanel");
        detailPanel.layout.setActiveItem(0);
    },

    onHypervisorGridSelect: function(dataview, record, item, index, e, eOpts) {
        //RHEVM Grid Item Click

        RHEVMConstants.selectRow = record;

        this.selectHypervisorGrid();
    },

    onRhevmTabPanelTabChange: function(tabPanel, newCard, oldCard, eOpts) {
        var detailTab = Ext.getCmp("rhevmTabDetailPanel");
        detailTab.collapse();
        detailTab.layout.setActiveItem(0);

        var grid;
        if(newCard.title == "Templates"){
            grid = Ext.getCmp('rhevmTemplateGrid');
        } else {
            grid = Ext.getCmp('rhevmVMGrid');
        }
        grid.getSelectionModel().deselectAll();
    },

    onRhevmVMGridItemClick: function(dataview, record, item, index, e, eOpts) {
        //RHEVM VM Grid Item Click
        var detailTab = Ext.getCmp("rhevmTabDetailPanel");
        detailTab.expand();

        detailTab.layout.setActiveItem(1);

        RHEVMConstants.childSelectRow = record;

        Ext.getCmp("rhevmTabDetailTabPanel").setActiveTab(0);


        //General Data Loading
        var generalform = Ext.getCmp("rhevmGeneralForm");

        generalform.getForm().reset();

        generalform.getForm().findField('template').show();
        generalform.getForm().findField('type').hide();

        generalform.getForm().waitMsgTarget = generalform.getEl();

        generalform.getForm().load({
            params : {
                hypervisorId : RHEVMConstants.selectRow.get("hypervisorId"),
                vmId : record.get("vmId")
            }
            ,url : GLOBAL.urlPrefix + "/rhevm/vms/info"
            ,waitMsg:'Loading...'
            ,success: function(form, action) {
                var socket = form.findField('sockets').getRawValue();
                var cores = form.findField('cores').getRawValue();

                form.findField('core_socket').setRawValue((socket*cores) + ' (' + socket + ' Socket(s), ' + cores + ' Core(s) per Socket)');
            }
        });

        //Network Interfaces Data Loading
        var networkGrid = Ext.getCmp('rhevmNetworkGrid');

        networkGrid.columns[6].setVisible(true);
        networkGrid.columns[6].hideable = true;

        networkGrid.getStore().getProxy().url = GLOBAL.urlPrefix + "/rhevm/vms/nics";
        networkGrid.getStore().load({
            params:{
                hypervisorId : RHEVMConstants.selectRow.get("hypervisorId"),
                vmId : record.get("vmId")
            }
        });

        //Disk Data Loading
        var diskGrid = Ext.getCmp('rhevmDiskGrid');

        diskGrid.columns[1].setVisible(true);
        diskGrid.columns[1].hideable = true;

        diskGrid.getStore().getProxy().url = GLOBAL.urlPrefix + "/rhevm/vms/disks";
        diskGrid.getStore().load({
            params:{
                hypervisorId : RHEVMConstants.selectRow.get("hypervisorId"),
                vmId : record.get("vmId")
            }
        });

    },

    onRhevmVMGridBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        var position = e.getXY();
        e.stopEvent();

        RHEVMConstants.childSelectRow = record;

        var menu = RHEVMConstants.rhevmVMContextMenu;
        var status = record.get('status');

        menu.items.each(function( item ) {

            if(status == 'up') {

                if(item.text == 'Start')				item.setDisabled(true);
                else if(item.text == 'Stop')			item.setDisabled(false);
                else if(item.text == 'Shutdown')		item.setDisabled(false);
                else if(item.text == 'Remove')			item.setDisabled(true);
                else if(item.text == 'Export')			item.setDisabled(true);
                else if(item.text == 'Make Template')	item.setDisabled(true);

            } else if(status == 'down') {

                if(item.text == 'Start')				item.setDisabled(false);
                else if(item.text == 'Stop')			item.setDisabled(true);
                else if(item.text == 'Shutdown')		item.setDisabled(true);
                else if(item.text == 'Remove')			item.setDisabled(false);
                else if(item.text == 'Export')			item.setDisabled(false);
                else if(item.text == 'Make Template')	item.setDisabled(false);

            } else {
                item.setDisabled(true);
            }

        });

        menu.showAt(position);
    },

    onRhevmTemplateGridSelect: function(dataview, record, item, index, e, eOpts) {
        //RHEVM VM Grid Item Click
        var detailTab = Ext.getCmp("rhevmTabDetailPanel");
        detailTab.expand();

        detailTab.layout.setActiveItem(1);

        RHEVMConstants.childSelectRow = record;

        Ext.getCmp("rhevmTabDetailTabPanel").setActiveTab(0);


        //General Data Loading
        var generalform = Ext.getCmp("rhevmGeneralForm");

        generalform.getForm().reset();

        generalform.getForm().findField('template').hide();
        generalform.getForm().findField('type').show();

        generalform.getForm().waitMsgTarget = generalform.getEl();

        generalform.getForm().load({
            params : {
                hypervisorId : RHEVMConstants.selectRow.get("hypervisorId"),
                templateId : record.get("templateId")
            }
            ,url : GLOBAL.urlPrefix + "/rhevm/templates/info"
            ,waitMsg:'Loading...'
        });


        //Network Interfaces Data Loading
        var networkGrid = Ext.getCmp('rhevmNetworkGrid');

        networkGrid.columns[6].setVisible(false);
        networkGrid.columns[6].hideable = false;

        networkGrid.getStore().getProxy().url = GLOBAL.urlPrefix + "/rhevm/templates/nics";
        networkGrid.getStore().load({
            params:{
                hypervisorId : RHEVMConstants.selectRow.get("hypervisorId"),
                templateId : record.get("templateId")
            }
        });


        //Disk Data Loading
        var diskGrid = Ext.getCmp('rhevmDiskGrid');

        diskGrid.columns[1].setVisible(false);
        diskGrid.columns[1].hideable = false;

        diskGrid.getStore().getProxy().url = GLOBAL.urlPrefix + "/rhevm/templates/disks";
        diskGrid.getStore().load({
            params:{
                hypervisorId : RHEVMConstants.selectRow.get("hypervisorId"),
                templateId : record.get("templateId")
            }
        });
    },

    onHypervisorGridBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        var position = e.getXY();
        e.stopEvent();

        RHEVMConstants.selectRow = record;

        RHEVMConstants.rhevmContextMenu.showAt(position);
    },

    onSearchRhevmVMNameKeydown: function(textfield, e, eOpts) {
        //Instance Name Search
        if(e.getKey() == e.ENTER){
            this.searchRhevmChildGrid('rhevmVMGrid');
        }
    },

    onSearchRhevmTemplateNameKeydown: function(textfield, e, eOpts) {
        //Instance Name Search
        if(e.getKey() == e.ENTER){
            this.searchRhevmChildGrid('rhevmTemplateGrid');
        }
    },

    onRhevmTemplateGridBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        var position = e.getXY();
        e.stopEvent();

        RHEVMConstants.childSelectRow = record;

        RHEVMConstants.rhevmTemplateContextMenu.showAt(position);
    },

    init: function(application) {
                var rhevm = this;

                var rhevmGridContextMenu = new Ext.menu.Menu({
                    items:
                    [
                    { text: 'Edit',
                        handler: function() {
                            rhevm.showRhevmWindow('edit');
                        }
                    },
                    { text: 'Delete',
                        handler: function() {
                            rhevm.deleteRhevm();
                        }
                    }
                    ]

                });

                var rhevmVMGridContextMenu = new Ext.menu.Menu({
                    items:
                    [
                    { text: 'Start',
                        handler: function() {
                            rhevm.controlVMStatus('Start');
                        }
                    },
                    { text: 'Stop',
                        handler: function() {
                            rhevm.controlVMStatus('Stop');
                        }
                    },
                    { text: 'Shutdown',
                        handler: function() {
                            rhevm.controlVMStatus('Shutdown');
                        }
                    },
                    { text: 'Remove',
                        handler: function() {
                            rhevm.controlVMStatus('Remove');
                        }
                    },
                    { text: 'Export',
                        handler: function() {
                            rhevm.controlVMStatus('Export');
                        }
                    },
                    { text: 'Make Template',
                        handler: function() {
                            rhevm.showTemplateWindow();
                            var templateWindow = Ext.create("widget.regTemplateWindow");

                            templateWindow.show();

                        }
                    }
                    ]

                });

                var rhevmTemplateGridContextMenu = new Ext.menu.Menu({
                    items:
                    [
                    { text: 'Instance Create',
                        handler: function() {
                            alert('Instance Create');
                        }
                    },
                    { text: 'Remove',
                        handler: function() {
                            rhevm.deleteTemplate();
                        }
                    }
                    ]

                });

                //RHEVM Menu Constants
                Ext.define('RHEVMConstants', {
                    singleton: true,
                    me : rhevm,
                    rhevmContextMenu: rhevmGridContextMenu,
                    rhevmVMContextMenu: rhevmVMGridContextMenu,
                    rhevmTemplateContextMenu: rhevmTemplateGridContextMenu,
                    selectRow : null,
                    childSelectRow : null
                });

        this.control({
            "#hypervisorGrid": {
                afterrender: this.onHypervisorRender,
                itemclick: this.onHypervisorGridSelect,
                beforeitemcontextmenu: this.onHypervisorGridBeforeItemContextMenu
            },
            "#rhevmTabPanel": {
                tabchange: this.onRhevmTabPanelTabChange
            },
            "#rhevmVMGrid": {
                itemclick: this.onRhevmVMGridItemClick,
                beforeitemcontextmenu: this.onRhevmVMGridBeforeItemContextMenu
            },
            "#rhevmTemplateGrid": {
                itemclick: this.onRhevmTemplateGridSelect,
                beforeitemcontextmenu: this.onRhevmTemplateGridBeforeItemContextMenu
            },
            "#searchRhevmVMName": {
                keydown: this.onSearchRhevmVMNameKeydown
            },
            "#searchRhevmTemplateName": {
                keydown: this.onSearchRhevmTemplateNameKeydown
            }
        });
    },

    searchHypervisor: function() {
        Ext.getCmp("hypervisorGrid").getStore().load();

        var detailPanel = Ext.getCmp("rhevmDetailPanel");
        detailPanel.layout.setActiveItem(0);
    },

    selectHypervisorGrid: function() {
        var detailPanel = Ext.getCmp("rhevmDetailPanel");
        detailPanel.layout.setActiveItem(1);

        Ext.getCmp("rhevmTabPanel").setActiveTab(0);

        var detailDPanel = Ext.getCmp("rhevmTabDetailPanel");
        detailDPanel.layout.setActiveItem(0);
        detailDPanel.collapse();

        Ext.getCmp("searchRhevmVMName").setRawValue("");
        Ext.getCmp("searchRhevmTemplateName").setRawValue("");

        this.searchRhevmChildGrid();

    },

    showRhevmWindow: function(type) {
        var rhevmWindow = Ext.create("widget.regRhevmWindow");
        rhevmWindow.show();

        if(type == 'edit') {

            rhevmWindow.setTitle("Edit RHEVM");

            var rhevmForm = Ext.getCmp("rhevmForm");

            rhevmForm.getForm().waitMsgTarget = rhevmForm.getEl();

            rhevmForm.getForm().load({
                params : {
                    hypervisorId : RHEVMConstants.selectRow.get("hypervisorId")
                }
                ,url : GLOBAL.urlPrefix + "/hypervisor/selectHypervisor"
                ,waitMsg:'Loading...'
            });

        }


    },

    deleteRhevm: function() {

        Ext.MessageBox.confirm('Confirm', '삭제 하시겠습니까?', function(btn){

            if(btn == "yes"){

                Ext.Ajax.request({
                    url: GLOBAL.urlPrefix + "/hypervisor/deleteHypervisor",
                    params : {
                        hypervisorId : RHEVMConstants.selectRow.get("hypervisorId")
                    },
                    disableCaching : true,
                    waitMsg: 'Delete RHEVM...',
                    success: function(response){
                        var msg = Ext.JSON.decode(response.responseText).msg;
                        Ext.MessageBox.alert('알림', msg);

                        Ext.getCmp("hypervisorGrid").getStore().reload();

                        Ext.getCmp("rhevmDetailPanel").layout.setActiveItem(0);

                    }
                });
            }

        });

    },

    searchRhevmChildGrid: function(grid_id) {

        var detailDPanel = Ext.getCmp("rhevmTabDetailPanel");
        detailDPanel.layout.setActiveItem(0);
        detailDPanel.collapse();

        if(grid_id == null) {

            //Virtual Machines Data Loading
            var vmGrid = Ext.getCmp('rhevmVMGrid');

            vmGrid.getStore().load({
                params:{
                    hypervisorId : RHEVMConstants.selectRow.get("hypervisorId")
                }
            });


            //Template Data Loading
            var templateGrid = Ext.getCmp('rhevmTemplateGrid');

            templateGrid.getStore().load({
                params:{
                    hypervisorId : RHEVMConstants.selectRow.get("hypervisorId")
                }
            });

        } else {

            var searchName = '';
            if(grid_id == 'rhevmVMGrid') {
                searchName = Ext.getCmp("searchRhevmVMName").getRawValue();
            } else {

            }

            var grid = Ext.getCmp(grid_id);
            grid.getStore().load({
                params:{
                    hypervisorId : RHEVMConstants.selectRow.get("hypervisorId"),
                    name : Ext.getCmp("searchRhevmTemplateName").getRawValue()
                }
            });

        }
    },

    showTemplateWindow: function() {

    },

    controlVMStatus: function(status) {

        var controlUrl = '';

        if(status == 'Start') {

            controlUrl = '/rhevm/vms/start';

        } else if(status == 'Stop') {

            controlUrl = '/rhevm/vms/stop';

        } else if(status == 'Shutdown') {

            controlUrl = '/rhevm/vms/shutdown';

        } else if(status == 'Remove') {

            controlUrl = '/rhevm/vms/remove';

        } else if(status == 'Export') {

            controlUrl = '/rhevm/vms/export';

        }

        Ext.MessageBox.confirm('Confirm', 'VM을 ' + status + '하시겠습니까?', function(btn){

            if(btn == "yes"){

                Ext.Ajax.request({
                    url: GLOBAL.urlPrefix + controlUrl,
                    params : {
                        hypervisorId : RHEVMConstants.selectRow.get("hypervisorId"),
                        vmId : RHEVMConstants.childSelectRow.get("vmId")
                    },
                    disableCaching : true,
                    waitMsg: status + ' VM...',
                    success: function(response){
                        var msg = Ext.JSON.decode(response.responseText).msg;
                        Ext.MessageBox.alert('알림', msg);

                        Ext.getCmp('rhevmVMGrid').getStore().reload();
                    }
                });
            }

        });
    },

    deleteTemplate: function() {

        Ext.MessageBox.confirm('Confirm', '삭제 하시겠습니까?', function(btn){

            if(btn == "yes"){

                Ext.Ajax.request({
                    url: GLOBAL.urlPrefix + "/rhevm/templates/remove",
                    params : {
                        hypervisorId : RHEVMConstants.selectRow.get("hypervisorId"),
                        templateId : RHEVMConstants.childSelectRow.get("templateId")
                    },
                    disableCaching : true,
                    waitMsg: 'Delete Template...',
                    success: function(response){
                        var msg = Ext.JSON.decode(response.responseText).msg;
                        Ext.MessageBox.alert('알림', msg);

                        Ext.getCmp('rhevmTemplateGrid').getStore().reload();

                    }
                });
            }

        });

    }

});
