/*
 * File: app/controller/UserController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.UserController', {
    extend: 'Ext.app.Controller',

    onSearchUserNameKeydown: function(textfield, e, eOpts) {
        //Instance Name Search
        if(e.getKey() == e.ENTER){
            this.searchUser();
        }
    },

    onUserGridSelect: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        //User Grid Item Click
        if(cellIndex > 5) {
            //Action Column 예외처리
            return;
        }

        if(userConstants.selectRow == null || userConstants.selectRow.get("userId") != record.get("userId")) {

            userConstants.selectRow = record;

            this.searchUserDetail();
        }
    },

    onUserGridBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        var position = e.getXY();
        e.stopEvent();

        userConstants.actionRow = record;

        userConstants.contextMenu.showAt(position);
    },

    searchUser: function(init) {
        //Instances Grid Data Search
        if(init) {

            Ext.getCmp("searchUserName").setValue("");
            Ext.getCmp("userGrid").reconfigure(Ext.getCmp("userGrid").store, Ext.getCmp("userGrid").initialConfig.columns);

        }

        userConstants.selectRow = null;

        Ext.getCmp("userGrid").getStore().load({
            params:{
                search : Ext.getCmp("searchUserName").getRawValue()
            }
        });

        var detailPanel = Ext.getCmp("userDetailPanel");
        detailPanel.layout.setActiveItem(0);
    },

    init: function(application) {
                //User Menu Config Setting

                var user = this;

                var userGridContextMenu = new Ext.menu.Menu({
                    items:
                    [
                    { text: 'Edit',
                        handler: function() {
                            user.showUserWindow('edit');
                        }
                    },
                    { text: 'Delete',
                        handler: function() {
                            user.deleteUser();
                        }
                    }
                    ]

                });

                //User Menu Constants
                Ext.define('userConstants', {
                    singleton: true,
                    me : user,
                    contextMenu: userGridContextMenu,
                    selectRow : null,
                    actionRow : null
                });


        this.control({
            "#searchUserName": {
                keydown: this.onSearchUserNameKeydown
            },
            "#userGrid": {
                cellclick: this.onUserGridSelect,
                beforeitemcontextmenu: this.onUserGridBeforeItemContextMenu
            }
        });
    },

    showUserWindow: function(type, user_id) {
        var userWindow = Ext.create("widget.userWindow");

        userWindow.setTitle("Edit User");
        userWindow.show();

        if(type != 'new') {

            if(user_id == null) {
                user_id = userConstants.actionRow.get("userId");
            }

            var userForm = Ext.getCmp("userForm");

            userForm.getForm().waitMsgTarget = userForm.getEl();

            userForm.getForm().load({
                params : {
                    userId : user_id
                }
                ,url : GLOBAL.urlPrefix + "user/getUser"
                ,waitMsg:'Loading...'
                ,success: function(form, action) {

                    var password = form.findField('passwd').getValue();

                    form.findField('confirmPasswd').setRawValue(password);
                    form.findField('editType').setRawValue(type);
                }
            });
        }


    },

    deleteUser: function() {

        Ext.MessageBox.confirm('Confirm', '삭제 하시겠습니까?', function(btn){

            if(btn == "yes"){

                Ext.Ajax.request({
                    url: GLOBAL.urlPrefix + "user/delete",
                    params : {
                        userId : userConstants.actionRow.get("userId")
                    },
                    disableCaching : true,
                    waitMsg: 'Delete User...',
                    success: function(response){
                        var msg = Ext.JSON.decode(response.responseText).msg;
                        Ext.MessageBox.alert('알림', msg);

                        userConstants.selectRow = null;

                        Ext.getCmp("userGrid").getStore().reload();
                        Ext.getCmp("userDetailPanel").layout.setActiveItem(0);

                    }
                });
            }

        });
    },

    searchUserDetail: function() {

        var userDetailPanel = Ext.getCmp("userDetailPanel");
        userDetailPanel.layout.setActiveItem(1);

        //User Data Loading

        var userForm = Ext.getCmp("getUserForm");

        userForm.getForm().reset();

        userForm.getForm().waitMsgTarget = userForm.getEl();

        userForm.getForm().load({
            params : {
                userId : userConstants.selectRow.get("userId")
            }
            ,url : GLOBAL.urlPrefix + "user/getUser"
            ,waitMsg:'Loading...'
        });

        Ext.getCmp("userTitleLabel").setText("<h2>&nbsp;&nbsp;&nbsp;"+userConstants.selectRow.get("userName")+"</h2>", false);
    }

});
