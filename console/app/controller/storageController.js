/*
 * File: app/controller/storageController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.storageController', {
    extend: 'Ext.app.Controller',

    id: 'storageController',

    onStorageMainContainerActivate: function(component, eOpts) {
        storageConstants.workingGrid = 'storageMainGrid';

        this.setStorageMainData();
    },

    onStorageHostButtonClick: function(button, e, eOpts) {
        storageConstants.workingGrid = 'storageHostGrid';

        Ext.getCmp('storageCenterContainer').layout.setActiveItem(1);
        this.setStorageHostData();
    },

    onStorageMonButtonClick: function(button, e, eOpts) {
        storageConstants.workingGrid = 'storageMonGrid';

        Ext.getCmp('storageCenterContainer').layout.setActiveItem(2);
        this.setStorageMonData();
    },

    onStorageOsdButtonClick: function(button, e, eOpts) {
        storageConstants.workingGrid = 'storageOsdGrid';

        Ext.getCmp('storageCenterContainer').layout.setActiveItem(3);
        this.setStorageOsdData();
    },

    onStoragePoolButtonClick: function(button, e, eOpts) {
        storageConstants.workingGrid = 'storagePoolGrid';

        Ext.getCmp('storageCenterContainer').layout.setActiveItem(4);
        this.setStoragePoolData();
    },

    onStoragePgButtonClick: function(button, e, eOpts) {
        storageConstants.workingGrid = 'storagePgGrid';

        Ext.getCmp('storageCenterContainer').layout.setActiveItem(5);
        this.setStoragePgData();
    },

    onStorageUsageButtonClick: function(button, e, eOpts) {
        storageConstants.workingGrid = 'storageUsageGrid';

        Ext.getCmp('storageCenterContainer').layout.setActiveItem(6);
        this.setStorageUsageData();
    },

    onStorageOsdGridpanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {

    },

    onStoragePoolGridpanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        var gId = Ext.getCmp(storageConstants.workingGrid).getStore().getAt(rowIndex).get('id');
        var gNm = Ext.getCmp(storageConstants.workingGrid).getStore().getAt(rowIndex).get('name');

        Ext.Ajax.request({
            url: GLOBAL.urlPrefix + "resources/json/storagePoolStats.json",
            disableCaching : true,
            success: function(response){
                var data = Ext.decode(response.responseText);

                var htmlData = '<pre>\r\n';

                Ext.each(data, function(pool){

                    if (pool.poolid == gId) {
                        htmlData += gNm + '\r\n';
                        htmlData += '    Log Size             : ' + pool.log_size + '\r\n';
                        htmlData += '    Ondisk Log Size      : ' + pool.ondisk_log_size + '\r\n';
                        htmlData += '    Num Read             : ' + pool.stat_sum.num_read + '\r\n';
                        htmlData += '    Num Object Recovered : ' + pool.stat_sum.num_objects_recovered + '\r\n';
                        htmlData += '    Num Object Omap      : ' + pool.stat_sum.num_objects_omap + '\r\n';
                        htmlData += '    Num Write            : ' + pool.stat_sum.num_write + '\r\n';
                        htmlData += '    Num Objects          : ' + pool.stat_sum.num_objects + '\r\n';
                        htmlData += '    Num Read kb          : ' + pool.stat_sum.num_read_kb + '\r\n';
                        htmlData += '    Num Write Kb         : ' + pool.stat_sum.num_write_kb + '\r\n';
                        htmlData += '    Num Bytes Recovered  : ' + pool.stat_sum.num_bytes_recovered + '\r\n';
                        htmlData += '    Num Object Copies    : ' + pool.stat_sum.num_object_copies + '\r\n';
                        htmlData += '    Num Bytes            : ' + pool.stat_sum.num_bytes + '\r\n';
                        htmlData += '    Num Objects Dirty    : ' + pool.stat_sum.num_objects_dirty + '\r\n';
                        htmlData += '\r\n';

                        return false;
                    }
                });

                htmlData += '</pre>';

                Ext.getCmp("storagePoolDetail").update(htmlData);
                Ext.getCmp("storagePoolDetail").updateLayout();
            }
        });

    },

    onHostAddButtonClick: function(button, e, eOpts) {
        //Add Popup 호출

        storageConstants.editMode = 'add';
        var AddWindow = Ext.create('widget.hostAddWindow');
        AddWindow.title = 'Add HOST';
        AddWindow.show();

    },

    onMonAddButtonClick: function(button, e, eOpts) {
        //Add Popup 호출

        storageConstants.editMode = 'add';
        var AddWindow = Ext.create('widget.monAddWindow');
        AddWindow.title = 'Add MON';


        var myForm = Ext.getCmp("monAddFormPanel");
        var addrField = myForm.getForm().findField("monAddIP");
        addrField.show();

        AddWindow.show();

    },

    onOsdAddButtonClick: function(button, e, eOpts) {
        //Add Popup 호출

        storageConstants.editMode = 'add';
        var AddWindow = Ext.create('widget.osdAddWindow');
        AddWindow.title = 'Add OSD';
        AddWindow.show();

    },

    onPoolAddButtonClick: function(button, e, eOpts) {
        //Add Popup 호출

        storageConstants.editMode = 'add';
        var AddWindow = Ext.create('widget.poolAddWindow');
        AddWindow.title = 'Add POOL';
        AddWindow.show();

    },

    onMonGridpanelBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        var position = e.getXY();
        e.stopEvent();

        storageConstants.selectRow = record;
        storageConstants.selectIndex = index;

        storageConstants.monContextMenu.showAt(position);
    },

    onPoolGridpanelBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        var position = e.getXY();
        e.stopEvent();

        storageConstants.selectRow = record;
        storageConstants.selectIndex = index;

        storageConstants.poolContextMenu.showAt(position);
    },

    setStorageMainData: function() {
        //Ext.getCmp("storageMainGrid").getStore().loadPage(1);
        Ext.getCmp("storageMainGrid").getStore().load();

        Ext.Ajax.request({
            url: GLOBAL.urlPrefix + "resources/json/storageMain1.json",
            disableCaching : true,
            success: function(response){
                var data = Ext.decode(response.responseText);

                var htmlData = '<pre>\r\n';
                htmlData += data.status + '\r\n';
                htmlData += '</pre>';

                Ext.getCmp("storageMainDetail").update(htmlData);
                Ext.getCmp("storageMainDetail").updateLayout();
            }
        });

        this.setStorageTopButtonsText();
    },

    setStorageHostData: function() {
        //Ext.getCmp(storageConstants.workingGrid).getStore().loadPage(1);
        Ext.getCmp(storageConstants.workingGrid).getStore().load();
        this.setStorageHostButtonText();
    },

    setStorageMonData: function() {
        //Ext.getCmp(storageConstants.workingGrid).getStore().loadPage(1);
        Ext.getCmp(storageConstants.workingGrid).getStore().load();

        Ext.Ajax.request({
            url: GLOBAL.urlPrefix + "resources/json/storageMon2.json",
            disableCaching : true,
            success: function(response){
                var data = Ext.decode(response.responseText);

                var htmlData = '<pre>\r\n';

                Ext.each(data, function(mon){
                    htmlData += mon.name + '\r\n';
                    htmlData += '    Avail Percent : ' + mon.avail_percent + '%\r\n';
                    htmlData += '    Size Total(K) : ' + mon.kb_total + 'K\r\n';
                    htmlData += '    Size Avail(K) : ' + mon.kb_avail + 'K\r\n';
                    htmlData += '    Size Used(K)  : ' + mon.kb_used + 'K\r\n';
                    htmlData += '    Health        : ' + mon.health + '\r\n';
                    htmlData += '\r\n';
                });

                htmlData += '</pre>';

                Ext.getCmp("storageMonDetail").update(htmlData);
                Ext.getCmp("storageMonDetail").updateLayout();
            }
        });

        this.setStorageMonButtonText();
    },

    setStorageOsdData: function() {
        //Ext.getCmp(storageConstants.workingGrid).getStore().loadPage(1);
        Ext.getCmp(storageConstants.workingGrid).getStore().load();

        Ext.Ajax.request({
            url: GLOBAL.urlPrefix + "resources/json/storageOsd.json",
            disableCaching : true,
            success: function(response){
                var data = Ext.decode(response.responseText);

                var htmlData = '<pre>\r\n';

                Ext.each(data, function(osd){
                    htmlData += osd.name + '\r\n';
                    htmlData += '    Public addr     : ' + osd.public_addr + '\r\n';
                    htmlData += '    Cluster addr    : ' + osd.cluster_addr + '\r\n';
                    htmlData += '    Heartbeat back  : ' + osd.heartbeat_back_addr + '\r\n';
                    htmlData += '    Heartbeat front : ' + osd.heartbeat_front_addr + '\r\n';
                    htmlData += '\r\n';
                });

                htmlData += '</pre>';

                Ext.getCmp("storageOsdDetail").update(htmlData);
                Ext.getCmp("storageOsdDetail").updateLayout();
            }
        });

        this.setStorageOsdButtonText();
    },

    setStoragePoolData: function() {
        //Ext.getCmp(storageConstants.workingGrid).getStore().loadPage(1);
        Ext.getCmp(storageConstants.workingGrid).getStore().load();
        this.setStoragePoolButtonText();
    },

    setStoragePgData: function() {
        //Ext.getCmp(storageConstants.workingGrid).getStore().loadPage(1);
        Ext.getCmp(storageConstants.workingGrid).getStore().load();

        Ext.Ajax.request({
            url: GLOBAL.urlPrefix + "resources/json/storagePgStats.json",
            disableCaching : true,
            success: function(response){
                var data = Ext.decode(response.responseText);

                var htmlData = '<pre>\r\n';

                htmlData += '    Acting               : ' + data.acting + '\r\n';
                htmlData += '    Log Size             : ' + data.log_size + '\r\n';
                htmlData += '    Ondisk Log Size      : ' + data.ondisk_log_size + '\r\n';
                htmlData += '    Num Read             : ' + data.stat_sum.num_read + '\r\n';
                htmlData += '    Num Object Recovered : ' + data.stat_sum.num_objects_recovered + '\r\n';
                htmlData += '    Num Object Omap      : ' + data.stat_sum.num_objects_omap + '\r\n';
                htmlData += '    Num Write            : ' + data.stat_sum.num_write + '\r\n';
                htmlData += '    Num Objects          : ' + data.stat_sum.num_objects + '\r\n';
                htmlData += '    Num Read kb          : ' + data.stat_sum.num_read_kb + '\r\n';
                htmlData += '    Num Write Kb         : ' + data.stat_sum.num_write_kb + '\r\n';
                htmlData += '    Num Bytes Recovered  : ' + data.stat_sum.num_bytes_recovered + '\r\n';
                htmlData += '    Num Object Copies    : ' + data.stat_sum.num_object_copies + '\r\n';
                htmlData += '    Num Bytes            : ' + data.stat_sum.num_bytes + '\r\n';
                htmlData += '    Num Objects Dirty    : ' + data.stat_sum.num_objects_dirty + '\r\n';
                htmlData += '    Up                   : ' + data.up + '\r\n';
                htmlData += '\r\n';

                htmlData += '</pre>';

                Ext.getCmp("storagePgDetail").update(htmlData);
                Ext.getCmp("storagePgDetail").updateLayout();
            }
        });

        this.setStoragePgButtonText();
    },

    setStorageUsageData: function() {
        //Ext.getCmp(storageConstants.workingGrid).getStore().loadPage(1);
        Ext.getCmp(storageConstants.workingGrid).getStore().load();

        Ext.Ajax.request({
            url: GLOBAL.urlPrefix + "resources/json/storageUsage1.json",
            disableCaching : true,
            success: function(response){
                var data = Ext.decode(response.responseText);
                Ext.getCmp("storageUsageDetail1").update(data);
            }
        });

        var myChart = Ext.getCmp('storageUsageDetailChart');
        myChart.getStore().load();

        this.setStorageUsageButtonText();
    },

    setStorageTopButtonsText: function() {
        this.setStorageHostButtonText();
        this.setStorageMonButtonText();
        this.setStorageOsdButtonText();
        this.setStoragePoolButtonText();
        this.setStoragePgButtonText();
        this.setStorageUsageButtonText();

    },

    setStorageHostButtonText: function() {
        Ext.Ajax.request({
            //url: GLOBAL.urlPrefix + "resources/json/storageHost.json",
            url: GLOBAL.urlPrefix + Ext.getCmp('storageHostGrid').getStore().getProxy().url,
            disableCaching : true,
            success: function(response){
                var data = Ext.decode(response.responseText);

                var totalCnt = 0;
                var activeCnt = 0;

                Ext.each(data.list, function(list){
                    totalCnt++;
                    if (list.running == 'OK'){
                        activeCnt++;
                    }
                });

                //Ext.getCmp("storageHostButton").text  = "HOST<br>" + totalCnt.toString() + " / " + activeCnt.toString() + "<br>Running";
                var textData = "HOST<br>" + activeCnt.toString() + " / " + totalCnt.toString() + "<br>Running";
                Ext.getCmp("storageHostButton").setText(textData);
            }
        });

    },

    setStorageMonButtonText: function() {
        Ext.Ajax.request({
            //url: GLOBAL.urlPrefix + "resources/json/storageMon.json",
            url: GLOBAL.urlPrefix + Ext.getCmp('storageMonGrid').getStore().getProxy().url,
            disableCaching : true,
            success: function(response){
                var data = Ext.decode(response.responseText);

                var totalCnt = 0;
                var activeCnt = 0;

                Ext.each(data, function(list){
                    totalCnt++;
                    if (list.in_quorum === true){
                        activeCnt++;
                    }
                });

                //Ext.getCmp("storageMonButton").text  = "MON<br>" + totalCnt.toString() + " / " + activeCnt.toString() + "<br>Quorum";
                var textData = "MON<br>" + activeCnt.toString() + " / " + totalCnt.toString() + "<br>Quorum";
                Ext.getCmp("storageMonButton").setText(textData);
            }
        });

    },

    setStorageOsdButtonText: function() {
        Ext.Ajax.request({
            //url: GLOBAL.urlPrefix + "resources/json/storageOsd.json",
            url: GLOBAL.urlPrefix + Ext.getCmp('storageOsdGrid').getStore().getProxy().url,
            disableCaching : true,
            success: function(response){
                var data = Ext.decode(response.responseText);

                var totalCnt = 0;
                var activeCnt = 0;

                Ext.each(data, function(list){
                    totalCnt++;
                    if ((list.status == 'up/in') || (list.status == 'in/up')){
                        activeCnt++;
                    }
                });

                //Ext.getCmp("storageOsdButton").text  = "OSD<br>" + totalCnt.toString() + " / " + activeCnt.toString() + "<br>In & Up";
                var textData = "OSD<br>" + activeCnt.toString() + " / " + totalCnt.toString() + "<br>In & Up";
                Ext.getCmp("storageOsdButton").setText(textData);
            }
        });

    },

    setStoragePoolButtonText: function() {
        Ext.Ajax.request({
            //url: GLOBAL.urlPrefix + "resources/json/storagePool.json",
            url: GLOBAL.urlPrefix + Ext.getCmp('storagePoolGrid').getStore().getProxy().url,
            disableCaching : true,
            success: function(response){
                var data = Ext.decode(response.responseText);

                var totalCnt = 0;
                var activeCnt = 0;

                totalCnt = data.length;

                //Ext.getCmp("storagePoolButton").text  = "POOL<br>" + totalCnt.toString() + "<br>Active";
                var textData = "POOL<br>" + totalCnt.toString() + "<br>Active";
                Ext.getCmp("storagePoolButton").setText(textData);
            }
        });

    },

    setStoragePgButtonText: function() {
        Ext.Ajax.request({
            //url: GLOBAL.urlPrefix + "resources/json/storagePg.json",
            url: GLOBAL.urlPrefix + Ext.getCmp('storagePgGrid').getStore().getProxy().url,
            disableCaching : true,
            success: function(response){
                var data = Ext.decode(response.responseText);

                var totalCnt = 0;
                var activeCnt = 0;

                Ext.each(data, function(list){
                    totalCnt += list.num;
                    if (list.name == 'active+clean'){
                        activeCnt += list.num;
                    }
                });

                //Ext.getCmp("storagePgButton").text  = "PG Status<br>" + totalCnt.toString() + " / " + activeCnt.toString() + "<br>Active/Clean";
                var textData = "PG Status<br>" + activeCnt.toString() + " / " + totalCnt.toString() + "<br>Active/Clean";
                Ext.getCmp("storagePgButton").setText(textData);
            }
        });

    },

    setStorageUsageButtonText: function() {
        Ext.Ajax.request({
            url: GLOBAL.urlPrefix + "resources/json/storageUsage1.json",
            disableCaching : true,
            success: function(response){
                var data = Ext.decode(response.responseText);

                var totalCnt = 0;
                var activeCnt = 0;
                var units = '';

                Ext.each(data, function(list){
                    totalCnt += list.total_kb;
                    activeCnt += list.total_kb_used;
                });

                if (totalCnt > 1073741824){
                    totalCnt  /= 1073741824;  // Kb -> Tb (1024 * 1024 * 1024)
                    activeCnt /= 1073741824;  // Kb -> Tb (1024 * 1024 * 1024)
                    units = 'Tb';
                } else {
                    totalCnt  /= 1048576;  // Kb -> Gb (1024 * 1024)
                    activeCnt /= 1048576;     // Kb -> Gb (1024 * 1024)
                    units = 'Gb';
                }

                //Ext.getCmp("storageUsageButton").text  = "Usage<br>&nbsp;<br>" + totalCnt.toFixed(1) + units + " / " + activeCnt.toFixed(1) + units;
                var textData = "Usage<br>&nbsp;<br>" + activeCnt.toFixed(1) + units + " / " + totalCnt.toFixed(1) + units;
                Ext.getCmp("storageUsageButton").setText(textData);
            }
        });

    },

    addStorageHost: function() {
        //Add Host Execute

        var myForm = Ext.getCmp("hostAddFormPanel");

        var host = myForm.getForm().findField("hostAddHost").getValue();
        var user = myForm.getForm().findField("hostAddUser").getValue();
        var pass = myForm.getForm().findField("hostAddPass").getValue();

        var myData = {'list':[{'type':'mon', 'id':host, 'hostname':host, 'running':'OK'}]};
        //Ext.MessageBox.alert("info", Ext.JSON.encode(myData));

        Ext.getCmp(storageConstants.workingGrid).getStore().loadRawData(myData, true);

        myForm.up('window').close();

        this.setStorageHostButtonText();
    },

    addStorageMon: function() {
        //Add Mon Execute

        var myForm = Ext.getCmp("monAddFormPanel");
        var host = myForm.getForm().findField("monAddHost").getValue();
        var addr = myForm.getForm().findField("monAddIP").getValue();

        if (storageConstants.editMode == 'add') {
            var myData = {'name':host, 'rank':10, 'in_quorum':true, 'server':host, 'ip':addr, 'port':'6780', 'pid':'0', 'addr':addr+':6780/0'};

            //Ext.MessageBox.alert("info", Ext.JSON.encode(myData));

            Ext.getCmp(storageConstants.workingGrid).getStore().loadRawData(myData, true);
        } else {
            Ext.getCmp(storageConstants.workingGrid).getStore().getAt(storageConstants.selectIndex).set('name', host);
            Ext.getCmp(storageConstants.workingGrid).getStore().getAt(storageConstants.selectIndex).set('server', host);
        }

        myForm.up('window').close();

        this.setStorageMonButtonText();
    },

    addStorageOsd: function() {
        //Add Osd Execute

        var myForm = Ext.getCmp("osdAddFormPanel");
        var host = myForm.getForm().findField("osdAddHost").getValue();
        var addr = myForm.getForm().findField("osdAddIP").getValue();

        var myData = {
          'name':'osd.10',
          'id':10,
          'status':'up/in',
          'ip':addr,
          'port':'6800',
          'pid':'1633',
          'public_addr':addr + ':6800/1633',
          'cluster_addr':'10.0.0.229:6800/1633',
          'heartbeat_back_addr':'10.0.0.229:6801/1633',
          'heartbeat_front_addr':addr + ':6801/1633',
          'up_from':86,
          'host':host
         };

        //Ext.MessageBox.alert("info", Ext.JSON.encode(myData));

        Ext.getCmp(storageConstants.workingGrid).getStore().loadRawData(myData, true);

        myForm.up('window').close();

        this.setStorageOsdButtonText();
    },

    addStoragePool: function() {
        //Add Pool Execute

        var myForm = Ext.getCmp("poolAddFormPanel");
        var name = myForm.getForm().findField("poolAddName").getValue();
        var size = myForm.getForm().findField("poolAddSize").getValue();
        var pgnm = myForm.getForm().findField("poolAddPgNum").getValue();

        if (storageConstants.editMode == 'add') {
            var myData = {
             "name": name,
             "id": 21,
             "size": size,
             "pg_num": pgnm,
             "crush_ruleset": 0,
             "min_size": size,
             "crash_replay_interval": 0,
             "pgp_num": pgnm,
             "hashpspool": true,
             "full": false,
             "quota_max_objects": 0,
             "quota_max_bytes": 0
            };

            //Ext.MessageBox.alert("info", Ext.JSON.encode(myData));

            Ext.getCmp(storageConstants.workingGrid).getStore().loadRawData(myData, true);
        } else {
            Ext.getCmp(storageConstants.workingGrid).getStore().getAt(storageConstants.selectIndex).set('name', name);
            Ext.getCmp(storageConstants.workingGrid).getStore().getAt(storageConstants.selectIndex).set('size', size);
            Ext.getCmp(storageConstants.workingGrid).getStore().getAt(storageConstants.selectIndex).set('pg_num', pgnm);
            Ext.getCmp(storageConstants.workingGrid).getStore().getAt(storageConstants.selectIndex).set('min_size', size);
            Ext.getCmp(storageConstants.workingGrid).getStore().getAt(storageConstants.selectIndex).set('pgp_num', pgnm);
        }

        myForm.up('window').close();

        this.setStoragePoolButtonText();
    },

    editStorageMon: function() {
        //Add Popup 호출(title = Edit)

        storageConstants.editMode = 'edit';
        var AddWindow = Ext.create('widget.monAddWindow');
        AddWindow.title = 'Edit MON';

        var myForm = Ext.getCmp("monAddFormPanel");
        var nameField = myForm.getForm().findField("monAddHost");
        var addrField = myForm.getForm().findField("monAddIP");

        var name = storageConstants.selectRow.get('server');
        var addr = storageConstants.selectRow.get('ip');

        nameField.setValue(name);
        addrField.setValue(addr);

        addrField.hide();

        AddWindow.show();

    },

    deleteStorageMon: function() {
        Ext.Msg.show({
            title:'Confirm',
            msg: 'Delete selected MON?',
            buttons: Ext.Msg.OKCANCEL,
            icon: Ext.Msg.QUESTION,
            fn: function(btn) {
                if (btn === 'ok') {
                    Ext.getCmp(storageConstants.workingGrid).getStore().remove(storageConstants.selectRow);
                }
            }
        });

        this.setStorageMonButtonText();
    },

    editStoragePool: function() {
        //Add Popup 호출(title = Edit)

        storageConstants.editMode = 'edit';
        var AddWindow = Ext.create('widget.poolAddWindow');
        AddWindow.title = 'Edit POOL';

        var myForm = Ext.getCmp("poolAddFormPanel");
        var nameField = myForm.getForm().findField("poolAddName");
        var sizeField = myForm.getForm().findField("poolAddSize");
        var pgnmField = myForm.getForm().findField("poolAddPgNum");

        var name = storageConstants.selectRow.get('name');
        var size = storageConstants.selectRow.get('size');
        var pgnm = storageConstants.selectRow.get('pg_num');

        nameField.setValue(name);
        sizeField.setValue(size);
        pgnmField.setValue(pgnm);

        AddWindow.show();

    },

    deleteStoragePool: function() {
        Ext.Msg.show({
            title:'Confirm',
            msg: 'Delete selected POOL?',
            buttons: Ext.Msg.OKCANCEL,
            icon: Ext.Msg.QUESTION,
            fn: function(btn) {
                if (btn === 'ok') {
                    Ext.getCmp(storageConstants.workingGrid).getStore().remove(storageConstants.selectRow);
                }
            }
        });

        this.setStoragePoolButtonText();
    },

    init: function(application) {
                var storage = this;

                var monGridContextMenu = new Ext.menu.Menu({
                    items:
                    [
                    { text: 'Edit',
                        handler: function() {
                            storage.editStorageMon();
                        }
                    },
                    { text: 'Delete',
                        handler: function() {
                            storage.deleteStorageMon();
                        }
                    }
                    ]

                });

                var poolGridContextMenu = new Ext.menu.Menu({
                    items:
                    [
                    { text: 'Edit',
                        handler: function() {
                            storage.editStoragePool();
                        }
                    },
                    { text: 'Delete',
                        handler: function() {
                            storage.deleteStoragePool();
                        }
                    }
                    ]

                });

                Ext.define('storageConstants', {
                    singleton: true,
                    me : storage,
                    monContextMenu: monGridContextMenu,
                    poolContextMenu: poolGridContextMenu,
                    workingGrid: '',
                    selectRow:  null,
                    selectIndex: 0,
                    editMode: 'add',
                    chartInterval : null
                });

        this.control({
            "#storageMainContainer": {
                activate: this.onStorageMainContainerActivate
            },
            "#storageHostButton": {
                click: this.onStorageHostButtonClick
            },
            "#storageMonButton": {
                click: this.onStorageMonButtonClick
            },
            "#storageOsdButton": {
                click: this.onStorageOsdButtonClick
            },
            "#storagePoolButton": {
                click: this.onStoragePoolButtonClick
            },
            "#storagePgButton": {
                click: this.onStoragePgButtonClick
            },
            "#storageUsageButton": {
                click: this.onStorageUsageButtonClick
            },
            "#storageOsdGrid": {
                cellclick: this.onStorageOsdGridpanelCellClick
            },
            "#storagePoolGrid": {
                cellclick: this.onStoragePoolGridpanelCellClick,
                beforeitemcontextmenu: this.onPoolGridpanelBeforeItemContextMenu
            },
            "#storageHostAdd": {
                click: this.onHostAddButtonClick
            },
            "#storageMonAdd": {
                click: this.onMonAddButtonClick
            },
            "#storageOsdAdd": {
                click: this.onOsdAddButtonClick
            },
            "#storagePoolAdd": {
                click: this.onPoolAddButtonClick
            },
            "#storageMonGrid": {
                beforeitemcontextmenu: this.onMonGridpanelBeforeItemContextMenu
            }
        });
    }

});
