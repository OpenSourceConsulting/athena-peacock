/*
 * File: app/controller/InstancesController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.InstancesController', {
    extend: 'Ext.app.Controller',

    id: 'InstancesController',

    onInstancesGridSelect: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {

        //Instances Grid Item Click

        if(instancesConstants.selectRow == null || instancesConstants.selectRow.get("machineId") != record.get("machineId")) {

            instancesConstants.selectRow = record;

            this.selectInstanceGrid();
        }

        /*

        var detailPanel = Ext.getCmp("instanceDetailPanel");
        detailPanel.layout.setActiveItem(1);

        Ext.getCmp("instanceTabPanel").setActiveTab(0);

        //init clear
        clearInterval(instancesConstants.chartInterval);
        Ext.getStore("instanceMonitoringChartStore").removeAll();

        //Description Data Loading
        var descform = Ext.getCmp("instanceDescForm");

        descform.getForm().reset();

        descform.getForm().waitMsgTarget = descform.getEl();

        descform.getForm().load({
            params : {
                instanceID : record.get("instanceID")
            }
            ,url : GLOBAL.urlPrefix + "/instance/getInstanceDescription"
            ,waitMsg:'Loading...'
        });


        //Software Data Loading
        var softwareGrid = Ext.getCmp('instanceSoftwareGrid');

        softwareGrid.getStore().load({
            params:{
                instanceID : record.get("instanceID")
            }
        });


        //OS Package Data Loading
        this.searchInstanceOs();


        //Monitoring Data Loading

        instancesConstants.chartInterval = setInterval(function() {

            var chartStore = Ext.getStore("instanceMonitoringChartStore");
            chartStore.load({
                addRecords : true
            });

            if(chartStore.getCount() > 30) {
                chartStore.remove(chartStore.getAt(0));
            }

        }, 5000);

        */
    },

    onInstancesGridBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        //Instaces Grid Right Click Menu 호출

        var position = e.getXY();
        e.stopEvent();

        instancesConstants.actionRow = record;

        instancesConstants.contextMenu.showAt(position);


    },

    onCategoryCycleClick: function(item, e, eOpts) {
        // Category Menu Click
        if(Ext.getCmp("searchCategory").getRawValue() != item.getId()) {

            if(item.getId() == 'production') {
                Ext.getCmp("searchCategory").setRawValue("Y");

            } else if(item.getId() == 'development') {

                Ext.getCmp("searchCategory").setRawValue("N");

            } else {

                Ext.getCmp("searchCategory").setRawValue("");

            }

            this.searchInstance();
        }

    },

    onRhevmCycleClick: function(item, e, eOpts) {
        //RHEVM Menu Click

        if(Ext.getCmp("searchRhevm").getRawValue() != item.code) {

            Ext.getCmp("searchRhevm").setRawValue(item.code);

            this.searchInstance();
        }


    },

    onSearchInstanceNameKeydown: function(textfield, e, eOpts) {
        //Instance Name Search
        if(e.getKey() == e.ENTER){
            this.searchInstance();
        }
    },

    onSearchPackageNameKeydown: function(textfield, e, eOpts) {
        //Instance Package Name Search
        if(e.getKey() == e.ENTER){
            this.searchInstanceOs();
        }
    },

    onInstanceTabPanelTabChange: function(tabPanel, newCard, oldCard, eOpts) {
        if(newCard.title == "Description"){

            this.searchInstanceDetail(0);

        } else if(newCard.title == "Software"){

        } else if(newCard.title == "OS Package"){

            Ext.getCmp("searchPackageName").setValue("");
            Ext.getCmp("instanceOsGrid").reconfigure(Ext.getCmp("instanceOsGrid").store, Ext.getCmp("instanceOsGrid").initialConfig.columns);

            this.searchInstanceDetail(2);

        } else {

        }

        /*

        if(newCard.title == "Description"){

            Ext.getCmp("searchRhevmTemplateName").setValue("");
            Ext.getCmp("rhevmTemplateGrid").reconfigure(Ext.getCmp("rhevmTemplateGrid").store, Ext.getCmp("rhevmTemplateGrid").initialConfig.columns);

            this.searchRhevmChildGrid("rhevmTemplateGrid");

        } else {

            Ext.getCmp("searchRhevmVMName").setValue("");
            Ext.getCmp("rhevmVMGrid").reconfigure(Ext.getCmp("rhevmVMGrid").store, Ext.getCmp("rhevmVMGrid").initialConfig.columns);

            this.searchRhevmChildGrid("rhevmVMGrid");

        }
        */
    },

    init: function(application) {
                //Instances Menu Config Setting

                var instances = this;

                var instancesGridContextMenu = new Ext.menu.Menu({
                    items:
                    [
                    { text: 'Edit Instance Name',
                        handler: function() {
                            instances.showEditInstanceNameWindow();
                        }
                    },
                    { text: 'CLI(Command Line Interface)',
                        handler: function() {
                            instances.showCLIWindow();
                        }
                    },
                    { text: 'Manage Account',
                        handler: function() {
                            instances.showManageAccountWindow();
                        }
                    },
                    { text: 'Edit Fstab',
                        handler: function() {
                            instances.showFstabWindow();
                        }
                    },
                    { text: 'Edit Crontab',
                        handler: function() {
                            instances.showCrontabWindow();
                        }
                    }
                    ]

                });

                //Instances Menu Constants
                Ext.define('instancesConstants', {
                    singleton: true,
                    me : instances,
                    chartInterval : null,
                    contextMenu: instancesGridContextMenu,
                    selectRow : null,
                    actionRow : null
                });


        this.control({
            "#instancesGrid": {
                cellclick: this.onInstancesGridSelect,
                beforeitemcontextmenu: this.onInstancesGridBeforeItemContextMenu
            },
            "#categoryCycle menuitem": {
                click: this.onCategoryCycleClick
            },
            "#rhevmCycle menuitem": {
                click: this.onRhevmCycleClick
            },
            "#searchInstanceName": {
                keydown: this.onSearchInstanceNameKeydown
            },
            "#searchPackageName": {
                keydown: this.onSearchPackageNameKeydown
            },
            "#instanceTabPanel": {
                tabchange: this.onInstanceTabPanelTabChange
            }
        });
    },

    initInstance: function() {

        var rhevmCycle = Ext.getCmp("rhevmCycle").menu;
        var menuItems = rhevmCycle.items;


        for(var idx = menuItems.length; idx >= 0; idx--) {
            menuItems.removeAt(idx);
        }

        rhevmCycle.add({
            xtype: 'menucheckitem',
            code: '',
            text: 'All RHEV Manager',
            group : 'rhevm',
            checked : true
        });

        var comboStore = Ext.getStore("ComboHypervisorStore");
        comboStore.load();

        comboStore.each(function (record, index) {

            rhevmCycle.add({
                xtype: 'menucheckitem',
                code: record.get("hypervisorId"),
                text: record.get("rhevmName"),
                group : 'rhevm'
            });

        });
        rhevmCycle.doLayout();

    },

    searchInstance: function(init) {

        if(init) {
            Ext.getCmp("searchCategory").setValue("");
            Ext.getCmp("searchRhevm").setValue("");
            Ext.getCmp("searchInstanceName").setValue("");

            Ext.getCmp("instancesGrid").reconfigure(Ext.getCmp("instancesGrid").store, Ext.getCmp("instancesGrid").initialConfig.columns);
        }

        instancesConstants.selectRow = null;

        //Instances Grid Data Search

        var instanceStore = Ext.getCmp("instancesGrid").getStore();

        instanceStore.getProxy().extraParams = {
            isPrd : Ext.getCmp("searchCategory").getRawValue(),
            hypervisorId : Ext.getCmp("searchRhevm").getRawValue(),
            displayName : Ext.getCmp("searchInstanceName").getRawValue()
        };

        instanceStore.load();

        var detailPanel = Ext.getCmp("instanceDetailPanel");
        detailPanel.layout.setActiveItem(0);
    },

    selectInstanceGrid: function() {

        var detailPanel = Ext.getCmp("instanceDetailPanel");
        detailPanel.layout.setActiveItem(1);

        Ext.getCmp("instanceTabPanel").setActiveTab(0);

        this.searchInstanceDetail(0);
    },

    searchInstanceDetail: function(tabIndex) {
        /*
        //init clear
        clearInterval(instancesConstants.chartInterval);
        Ext.getStore("instanceMonitoringChartStore").removeAll();

        */

        if(tabIndex == 0) {

            //Description Data Loading
            var descform = Ext.getCmp("instanceDescForm");

            descform.getForm().reset();

            descform.getForm().waitMsgTarget = descform.getEl();

            descform.getForm().load({
                params : {
                    machineId : instancesConstants.selectRow.get("machineId")
                }
                ,url : GLOBAL.urlPrefix + "machine/getMachine"
                ,waitMsg:'Loading...'
            });


        } else if(tabIndex == 1) {

            //Software Data Loading
            var softwareGrid = Ext.getCmp('instanceSoftwareGrid');

            softwareGrid.getStore().load({
                params:{
                    instanceID : record.get("instanceID")
                }
            });

        } else if(tabIndex == 2) {

            //OS Package Data Loading
            this.searchInstanceOs();

        } else {

            //Monitoring Data Loading

            instancesConstants.chartInterval = setInterval(function() {

            var chartStore = Ext.getStore("instanceMonitoringChartStore");
                chartStore.load({
                    addRecords : true
                });

                if(chartStore.getCount() > 30) {
                    chartStore.remove(chartStore.getAt(0));
                }

            }, 5000);
        }


    },

    searchInstanceOs: function() {
        //Instances Os Package Grid Data Search
        var packageStore = Ext.getCmp('instanceOsGrid').getStore();

        packageStore.getProxy().extraParams = {
            machineId : instancesConstants.selectRow.get("machineId"),
            name : Ext.getCmp("searchPackageName").getRawValue()
        };

        packageStore.load();

    },

    reloadInstanceOs: function() {
        if(instancesConstants.selectRow.get("status") != 'Running') {

            Ext.MessageBox.alert('Message', 'Instance의 Agent가 Running일 경우에만 재수집이 가능합니다.');
            return;

        }

        Ext.MessageBox.confirm('Confirm', 'OS Package 재수집은 최대 수분의 시간이 소요됩니다.<br/>재수집 하시겠습니까?', function(btn){

            if(btn == "yes"){

                Ext.Ajax.request({
                    url: GLOBAL.urlPrefix + "package/reload",
                    params : {
                        machineId : instancesConstants.selectRow.get("machineId")
                    },
                    disableCaching : true,
                    waitMsg: 'Package Reload...',
                    timeout: 300000,
                    success: function(response){
                        var msg = Ext.JSON.decode(response.responseText).msg;
                        Ext.MessageBox.alert('알림', msg);

                        Ext.getCmp("instanceOsGrid").getStore().reload();

                    }
                });
            }

        });

    },

    showCLIWindow: function() {
        var CLIWindow = Ext.create("widget.CLIWindow");
        CLIWindow.show();

        Ext.getCmp("cliForm").getForm().findField("machineId").setRawValue(instancesConstants.actionRow.get("machineId"));

    },

    showManageAccountWindow: function() {

        var manageAccountWindow = Ext.create("widget.ManageAccountWindow");
        manageAccountWindow.show();

        var accountStore = Ext.getCmp('instanceAccountGrid').getStore();

        accountStore.getProxy().extraParams = {
            machineId : instancesConstants.actionRow.get("machineId")
        };

        accountStore.load();

    },

    showFstabWindow: function() {
        var fstabWindow = Ext.create("widget.fstabWindow");

        fstabWindow.show();
    },

    showCrontabWindow: function() {
        var crontabWindow = Ext.create("widget.crontabWindow");

        crontabWindow.show();
    },

    showEditInstanceNameWindow: function() {
        var editWindow = Ext.create("widget.EditInstanceNameWindow");
        editWindow.show();

        var instanceForm = Ext.getCmp("instanceNameForm");

        instanceForm.getForm().findField("machineId").setRawValue(instancesConstants.actionRow.get("machineId"));
        instanceForm.getForm().findField("displayName").setRawValue(instancesConstants.actionRow.get("displayName"));

    }

});
