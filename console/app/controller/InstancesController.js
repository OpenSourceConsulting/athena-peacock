/*
 * File: app/controller/InstancesController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.InstancesController', {
    extend: 'Ext.app.Controller',

    id: 'InstancesController',

    onInstancesGridSelect: function(rowmodel, record, index, eOpts) {
        /*
        //Instances Grid Item Click

        instancesConstants.selectRow = record;

        var detailPanel = Ext.getCmp("instanceDetailPanel");
        detailPanel.layout.setActiveItem(1);

        Ext.getCmp("instanceTabPanel").setActiveTab(0);

        //init clear
        clearInterval(instancesConstants.chartInterval);
        Ext.getStore("instanceMonitoringChartStore").removeAll();

        //Description Data Loading
        var descform = Ext.getCmp("instanceDescForm");

        descform.getForm().reset();

        descform.getForm().waitMsgTarget = descform.getEl();

        descform.getForm().load({
            params : {
                instanceID : record.get("instanceID")
            }
            ,url : GLOBAL.urlPrefix + "/instance/getInstanceDescription"
            ,waitMsg:'Loading...'
        });


        //Software Data Loading
        var softwareGrid = Ext.getCmp('instanceSoftwareGrid');

        softwareGrid.getStore().load({
            params:{
                instanceID : record.get("instanceID")
            }
        });


        //OS Package Data Loading
        this.searchInstanceOs();


        //Monitoring Data Loading

        instancesConstants.chartInterval = setInterval(function() {

            var chartStore = Ext.getStore("instanceMonitoringChartStore");
            chartStore.load({
                addRecords : true
            });

            if(chartStore.getCount() > 30) {
                chartStore.remove(chartStore.getAt(0));
            }

        }, 5000);

        */
    },

    onInstancesGridBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        //Instaces Grid Right Click Menu 호출

        var position = e.getXY();
        e.stopEvent();

        instancesConstants.selectRow = record;

        instancesConstants.contextMenu.showAt(position);


    },

    onInstancesGridAfterRender: function(component, eOpts) {
        //Instances Grid rendering
        //this.searchInstance();
    },

    onCategoryCycleClick: function(item, e, eOpts) {
        // Category Menu Click
        if(Ext.getCmp("searchCategory").getRawValue() != item.getId()) {

            Ext.getCmp("searchCategory").setRawValue(item.getId());

            this.searchInstance();
        }

    },

    onRhevmCycleClick: function(item, e, eOpts) {
        //RHEVM Menu Click
        if(Ext.getCmp("searchRhevm").getRawValue() != item.getId()) {

            Ext.getCmp("searchRhevm").setRawValue(item.getId());

            this.searchInstance();
        }

    },

    onSearchInstanceNameKeydown: function(textfield, e, eOpts) {
        //Instance Name Search
        if(e.getKey() == e.ENTER){
            this.searchInstance();
        }
    },

    onSearchPackageNameKeydown: function(textfield, e, eOpts) {
        //Instance Package Name Search
        if(e.getKey() == e.ENTER){
            this.searchInstanceOs();
        }
    },

    init: function(application) {
                //Instances Menu Config Setting

                var instances = this;

                var instancesGridContextMenu = new Ext.menu.Menu({
                    items:
                    [
                    { text: 'CLI(Command Line Interface)',
                        handler: function() {
                            instances.showCLIWindow();
                        }
                    },
                    { text: 'Manage Account',
                        handler: function() {
                            instances.showManageAccountWindow();
                        }
                    },
                    { text: 'Edit Fstab',
                        handler: function() {
                            instances.showFstabWindow();
                        }
                    },
                    { text: 'Edit Crontab',
                        handler: function() {
                            instances.showCrontabWindow();
                        }
                    }
                    ]

                });

                //Instances Menu Constants
                Ext.define('instancesConstants', {
                    singleton: true,
                    me : instances,
                    chartInterval : null,
                    contextMenu: instancesGridContextMenu,
                    selectRow : null,
                    actionRow : null
                });


        this.control({
            "#instancesGrid": {
                select: this.onInstancesGridSelect,
                beforeitemcontextmenu: this.onInstancesGridBeforeItemContextMenu,
                afterrender: this.onInstancesGridAfterRender
            },
            "#categoryCycle menuitem": {
                click: this.onCategoryCycleClick
            },
            "#rhevmCycle menuitem": {
                click: this.onRhevmCycleClick
            },
            "#searchInstanceName": {
                keydown: this.onSearchInstanceNameKeydown
            },
            "#searchPackageName": {
                keydown: this.onSearchPackageNameKeydown
            }
        });
    },

    searchInstance: function() {
        //Instances Grid Data Search
        Ext.getCmp("instancesGrid").getStore().load({
            params:{
                search1 : Ext.getCmp("searchCategory").getRawValue(),
                search2 : Ext.getCmp("searchRhevm").getRawValue(),
                search3 : Ext.getCmp("searchInstanceName").getRawValue()
            }
        });

        var detailPanel = Ext.getCmp("instanceDetailPanel");
        detailPanel.layout.setActiveItem(0);
    },

    searchInstanceOs: function() {
        //Instances Os Package Grid Data Search

        Ext.getCmp('instanceOsGrid').getStore().load({
            params:{
                instanceID : instancesConstants.selectRow.get("instanceID"),
                search : Ext.getCmp("searchPackageName").getRawValue()
            }
        });

    },

    showCLIWindow: function() {
        var CLIWindow = Ext.create("widget.CLIWindow");

        CLIWindow.show();
    },

    showManageAccountWindow: function() {
        var manageAccountWindow = Ext.create("widget.manageAccountWindow");

        manageAccountWindow.show();
    },

    showFstabWindow: function() {
        var fstabWindow = Ext.create("widget.fstabWindow");

        fstabWindow.show();
    },

    showCrontabWindow: function() {
        var crontabWindow = Ext.create("widget.crontabWindow");

        crontabWindow.show();
    }

});
