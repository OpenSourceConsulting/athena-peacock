/*
 * File: app/controller/objectController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.objectController', {
    extend: 'Ext.app.Controller',

    id: 'objectController',

    onObjectBucketsGridpanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        objectConstants.selectRow = record;
        objectConstants.selectIndex = rowIndex;

        //var gNm = Ext.getCmp('objectBucketsGrid').getStore().getAt(rowIndex).get('name');
        var gNm = record.get('name');

        var gUrl = 'resources/json/objectBucketsStats1.json';
        var gLog = 'resources/json/objectBucketsBilog1.json';
        if (gNm == 'my-new-bucket2') {
            gUrl = 'resources/json/objectBucketsStats2.json';
            gLog = 'resources/json/objectBucketsBilog2.json';
        }

        Ext.Ajax.request({
            url: GLOBAL.urlPrefix + gUrl,
            disableCaching : true,
            success: function(response){
                var data = Ext.decode(response.responseText);

                var htmlData = '<pre>\r\n';
                htmlData += 'Bucket : ' + data.bucket + '\r\n';
                htmlData += 'Pool   : ' + data.pool + '\r\n';
                htmlData += 'mTime  : ' + data.mtime + '\r\n';
                htmlData += 'Owner  : ' + data.owner + '\r\n';
                htmlData += '</pre>';


                var logsData = '<pre>\r\n';
                logsData += 'Logging >\r\n';
                Ext.Ajax.request({
                    url: GLOBAL.urlPrefix + gLog,
                    disableCaching : true,
                    success: function(response){
                        var data = Ext.decode(response.responseText);

                        Ext.each(data, function(logs){
                            logsData += '' + logs + '\r\n';
                        });
                    }
                });
                logsData += '</pre>';

                Ext.getCmp("objectBucketsDetail1").update(htmlData);
                Ext.getCmp("objectBucketsDetail1").updateLayout();
                Ext.getCmp("objectBucketsDetail2").update(logsData);
                Ext.getCmp("objectBucketsDetail2").updateLayout();
                Ext.getCmp("objectBucketsDetail").expand();
            }
        });

    },

    onObjectBucketsGridpanelCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        objectConstants.selectRow = record;
        objectConstants.selectIndex = rowIndex;
        objectConstants.currentBucket = record.get('name');

        Ext.getCmp('objectCenterContainer').layout.setActiveItem(1);
        Ext.getCmp('filesTextItem1').setText(objectConstants.currentBucket);
        objectConstants.me.setObjectFilesData();

    },

    onObjectBucketsGridpanelBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        objectConstants.selectRow = record;
        objectConstants.selectIndex = index;

        var position = e.getXY();
        e.stopEvent();
        objectConstants.bucketsContextMenu.showAt(position);
    },

    onbucketsCreateButtonClick: function(button, e, eOpts) {
        //Add Popup 호출

        var AddWindow = Ext.create('widget.createBucketWindow');
        AddWindow.title = 'Create Bucket';
        AddWindow.show();

    },

    onbucketsCreateMenuitemClick: function(item, e, eOpts) {
        //Add Popup 호출

        var AddWindow = Ext.create('widget.createBucketWindow');
        AddWindow.title = 'Create Bucket';
        AddWindow.show();

    },

    onbucketsDeleteMenuitemClick: function(item, e, eOpts) {
        objectConstants.me.deleteObjectBucket();
    },

    onbucketsEmptyMenuitemClick: function(item, e, eOpts) {
        objectConstants.me.emptyObjectBucket();
    },

    onbucketsRefreshMenuitemClick: function(item, e, eOpts) {
        objectConstants.me.setObjectBucketsData();
    },

    onObjectFilesGridpanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        objectConstants.selectFilesRow = record;
        objectConstants.selectFilesIndex = rowIndex;

        var gNm = Ext.getCmp('objectFilesGrid').getStore().getAt(rowIndex).get('name');

        var gUrl = 'resources/json/objectFilesStat1.json';
        var gPer = 'resources/json/objectFilesPer1.json';
        if (gNm == 'myphoto2.jpg') {
            gUrl = 'resources/json/objectFilesStat2.json';
            gPer = 'resources/json/objectFilesPer2.json';
        }

        Ext.Ajax.request({
            url: GLOBAL.urlPrefix + gUrl,
            disableCaching : true,
            success: function(response){
                var data = Ext.decode(response.responseText);

                var htmlData = '<pre>\r\n';
                htmlData += 'Name   : ' + data.name + '\r\n';
                htmlData += 'Bucket : ' + data.bucket + '\r\n';
                htmlData += 'Link   : ' + data.links + '\r\n';
                htmlData += 'Size   : ' + data.size + '\r\n';
                htmlData += 'mTime  : ' + data.mdate + '\r\n';
                htmlData += 'Owner  : ' + data.owner + '\r\n';
                htmlData += 'Expire : ' + data.expire + '\r\n';
                htmlData += '</pre>';


                var persData = '<pre>\r\n';
                persData += 'Permisions >\r\n';
                Ext.Ajax.request({
                    url: GLOBAL.urlPrefix + gPer,
                    disableCaching : true,
                    success: function(response){
                        var data = Ext.decode(response.responseText);

                        Ext.each(data, function(pers){
                            persData += '' + pers + '\r\n';
                        });
                    }
                });
                persData += '</pre>';

                Ext.getCmp("objectFilesDetail1").update(htmlData);
                Ext.getCmp("objectFilesDetail1").updateLayout();
                Ext.getCmp("objectFilesDetail2").update(persData);
                Ext.getCmp("objectFilesDetail2").updateLayout();
                Ext.getCmp("objectFilesDetail").expand();
            }
        });

    },

    onObjectFilesGridpanelBeforeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        objectConstants.selectFilesRow = record;
        objectConstants.selectFilesIndex = index;

        var position = e.getXY();
        e.stopEvent();
        objectConstants.filesContextMenu.showAt(position);
    },

    onfilesTextItemButtonClick: function(button, e, eOpts) {
        Ext.getCmp('objectCenterContainer').layout.setActiveItem(0);

    },

    onfilesUploadButtonClick: function(button, e, eOpts) {
        objectConstants.me.uploadFileClick();
    },

    onfilesOpenMenuitemClick: function(item, e, eOpts) {
        objectConstants.me.openObjectFile();
    },

    onfilesDownloadMenuitemClick: function(item, e, eOpts) {
        objectConstants.me.downloadObjectFile();
    },

    onfilesUploadMenuitemClick: function(item, e, eOpts) {
        objectConstants.me.uploadFileClick();
    },

    onfilesMakepublicMenuitemClick: function(item, e, eOpts) {
        objectConstants.me.makepublicObjectFile();
    },

    onfilesMakeprotectedMenuitemClick: function(item, e, eOpts) {
        objectConstants.me.makeprotectedObjectFile();
    },

    onfilesRenameMenuitemClick: function(item, e, eOpts) {
        objectConstants.me.renameFileClick();

    },

    onfilesDeleteMenuitemClick: function(item, e, eOpts) {
        objectConstants.me.deleteObjectFile();
    },

    onfilesCutMenuitemClick: function(item, e, eOpts) {
        objectConstants.me.cutObjectFile();
    },

    onfilesCopyMenuitemClick: function(item, e, eOpts) {
        objectConstants.me.copyObjectFile();
    },

    onfilesPasteMenuitemClick: function(item, e, eOpts) {
        objectConstants.me.pasteObjectFile();
    },

    setObjectBucketsData: function() {
        Ext.getCmp('objectBucketsGrid').getStore().load();

    },

    createObjectBucket: function() {
        //Create Bucket Execute

        var myForm = Ext.getCmp("createBucketFormPanel");
        var name = myForm.getForm().findField("createBucketName").getValue();
        var myData = [ [name] ];

        Ext.getCmp('objectBucketsGrid').getStore().loadRawData(myData, true);

        myForm.up('window').close();

    },

    deleteObjectBucket: function() {
        Ext.Msg.show({
            title:'Confirm',
            msg: 'Delete selected Bucket?',
            buttons: Ext.Msg.OKCANCEL,
            icon: Ext.Msg.QUESTION,
            fn: function(btn) {
                if (btn === 'ok') {
                    Ext.getCmp('objectBucketsGrid').getStore().remove(objectConstants.selectRow);

                    Ext.getCmp("objectBucketsDetail1").update('');
                    Ext.getCmp("objectBucketsDetail1").updateLayout();
                    Ext.getCmp("objectBucketsDetail2").update('');
                    Ext.getCmp("objectBucketsDetail2").updateLayout();
                }
            }
        });

    },

    emptyObjectBucket: function() {
        Ext.Msg.show({
            title:'Confirm',
            msg: 'Empty selected Bucket?',
            buttons: Ext.Msg.OKCANCEL,
            icon: Ext.Msg.QUESTION,
            fn: function(btn) {
                if (btn === 'ok') {
                    alert('empty!');
                    //Ext.getCmp('objectBucketsGrid').getStore().remove(objectConstants.selectRow);
                }
            }
        });

    },

    setObjectFilesData: function() {
        Ext.getCmp('objectFilesGrid').getStore().load();

    },

    uploadFileClick: function() {
        //Upload Popup 호출

        var AddWindow = Ext.create('widget.uploadFileWindow');
        AddWindow.title = 'Upload';
        AddWindow.show();


    },

    renameFileClick: function() {
        //Rename Popup 호출

        var AddWindow = Ext.create('widget.renameFileWindow');
        AddWindow.title = 'Rename';

        var myForm = Ext.getCmp("renameFileFormPanel");
        var nameField = myForm.getForm().findField("renameFileName");
        var name = objectConstants.selectFilesRow.get('name');

        nameField.setValue(name);

        AddWindow.show();

    },

    openObjectFile: function() {
        var selections = Ext.getCmp('objectFilesGrid').selModel.getSelection();
        Ext.each(selections, function(recs){
            //Ext.getCmp('objectFilesGrid').getStore().remove(recs);
        });

    },

    downloadObjectFile: function() {
        var selections = Ext.getCmp('objectFilesGrid').selModel.getSelection();
        Ext.each(selections, function(recs){
            //Ext.getCmp('objectFilesGrid').getStore().remove(recs);
        });

    },

    uploadObjectFile: function(fnm) {
        // 다시 로드할 것
        var obj = [{'name':fnm, 'size':0, 'sclass':'', 'mdate':''}];
        Ext.getCmp('objectFilesGrid').getStore().loadRawData(obj, true);

        myForm.up('window').close();

    },

    makepublicObjectFile: function() {
        var selections = Ext.getCmp('objectFilesGrid').selModel.getSelection();
        Ext.each(selections, function(recs){
            //Ext.getCmp('objectFilesGrid').getStore().remove(recs);
        });

    },

    makeprotectedObjectFile: function() {
        var selections = Ext.getCmp('objectFilesGrid').selModel.getSelection();
        Ext.each(selections, function(recs){
            //Ext.getCmp('objectFilesGrid').getStore().remove(recs);
        });

    },

    renameObjectFile: function() {
        var myForm = Ext.getCmp("renameFileFormPanel");
        var nameField = myForm.getForm().findField("renameFileName");
        var name = nameField.getValue();

        Ext.getCmp('objectFilesGrid').getStore().getAt(objectConstants.selectFilesIndex).set('name', name);

        myForm.up('window').close();

    },

    deleteObjectFile: function() {
        var selections = Ext.getCmp('objectFilesGrid').selModel.getSelection();
        Ext.each(selections, function(recs){
            Ext.getCmp('objectFilesGrid').getStore().remove(recs);
        });

        Ext.getCmp("objectFilesDetail1").update('');
        Ext.getCmp("objectFilesDetail1").updateLayout();
        Ext.getCmp("objectFilesDetail2").update('');
        Ext.getCmp("objectFilesDetail2").updateLayout();

    },

    cutObjectFile: function() {
        objectConstants.filesSelectMode = 'cut';
        objectConstants.filesSelectBucket = objectConstants.currentBucket;
        objectConstants.filesSelectList = Ext.getCmp('objectFilesGrid').selModel.getSelection();

    },

    copyObjectFile: function() {
        objectConstants.filesSelectMode = 'copy';
        objectConstants.filesSelectBucket = objectConstants.currentBucket;
        objectConstants.filesSelectList = Ext.getCmp('objectFilesGrid').selModel.getSelection();

    },

    pasteObjectFile: function() {
        Ext.each(objectConstants.filesSelectList, function(recs){
            var obj = [{'name':recs.get('name'), 'size':recs.get('size'), 'sclass':recs.get('sclass'), 'mdate':recs.get('mdate')}];
            Ext.getCmp('objectFilesGrid').getStore().loadRawData(obj, true);
        });

        if (objectConstants.filesSelectMode == 'cut') {
            Ext.each(objectConstants.filesSelectList, function(recs){
                Ext.getCmp('objectFilesGrid').getStore().remove(recs);
            });

            objectConstants.filesSelectBucket = '';
            objectConstants.filesSelectList = null;
        }
    },

    init: function(application) {
                var objects = this;

                var bucketsGridContextMenu = new Ext.menu.Menu({
                    items:
                    [
                    { text: 'Delete Bucket',
                        handler: function() {
                            objects.deleteObjectBucket();
                        }
                    },
                    { text: 'Empty Bucket',
                        handler: function() {
                            objects.emptyObjectBucket();
                        }
                    }
                    ]
                });

                var filesGridContextMenu = new Ext.menu.Menu({
                    items:
                    [
                    { text: 'Open',
                        handler: function() {
                            objects.openObjectFile();
                        }
                    },
                    { text: 'Download',
                        handler: function() {
                            objects.downloadObjectFile();
                        }
                    },
                    { text: 'Upload',
                        handler: function() {
                            objects.uploadFileClick();
                        }
                    },
                    { text: 'Make Public',
                        handler: function() {
                            objects.makepublicObjectFile();
                        }
                    },
                    { text: 'Make Protected',
                        handler: function() {
                            objects.makeprotectedObjectFile();
                        }
                    },
                    { text: 'Rename',
                        handler: function() {
                            objects.renameFileClick();
                        }
                    },
                    { text: 'Delete',
                        handler: function() {
                            objects.deleteObjectFile();
                        }
                    },
                    {
                        xtype: 'menuseparator'
                    },
                    { text: 'Cut',
                        handler: function() {
                            objects.cutObjectFile();
                        }
                    },
                    { text: 'Copy',
                        handler: function() {
                            objects.copyObjectFile();
                        }
                    },
                    { text: 'Paste',
                        handler: function() {
                            objects.pasteObjectFile();
                        }
                    }
                    ]
                });

                Ext.define('objectConstants', {
                    singleton: true,
                    me : objects,
                    bucketsContextMenu: bucketsGridContextMenu,
                    filesContextMenu: filesGridContextMenu,
                    currentBucket: '',
                    filesSelectList: null,
                    filesSelectMode: 'cut',
                    filesSelectBucket: '',
                    selectRow:  null,
                    selectIndex: 0,
                    selectFilesRow:  null,
                    selectFilesIndex: 0
                });

        this.control({
            "#objectBucketsGrid": {
                cellclick: this.onObjectBucketsGridpanelCellClick,
                celldblclick: this.onObjectBucketsGridpanelCellDblClick,
                beforeitemcontextmenu: this.onObjectBucketsGridpanelBeforeItemContextMenu
            },
            "#bucketsCreateButton": {
                click: this.onbucketsCreateButtonClick
            },
            "#bucketsCreateMenuItem": {
                click: this.onbucketsCreateMenuitemClick
            },
            "#bucketsDeleteMenuItem": {
                click: this.onbucketsDeleteMenuitemClick
            },
            "#bucketsEmptyMenuItem": {
                click: this.onbucketsEmptyMenuitemClick
            },
            "#bucketsRefreshMenuItem": {
                click: this.onbucketsRefreshMenuitemClick
            },
            "#objectFilesGrid": {
                cellclick: this.onObjectFilesGridpanelCellClick,
                beforeitemcontextmenu: this.onObjectFilesGridpanelBeforeItemContextMenu
            },
            "#filesTextItem": {
                click: this.onfilesTextItemButtonClick
            },
            "#filesUploadButton": {
                click: this.onfilesUploadButtonClick
            },
            "#filesOpenMenuItem": {
                click: this.onfilesOpenMenuitemClick
            },
            "#filesDownloadMenuItem": {
                click: this.onfilesDownloadMenuitemClick
            },
            "#filesUploadMenuItem": {
                click: this.onfilesUploadMenuitemClick
            },
            "#filesMakepublicMenuItem": {
                click: this.onfilesMakepublicMenuitemClick
            },
            "#filesMakeprotectedMenuItem": {
                click: this.onfilesMakeprotectedMenuitemClick
            },
            "#filesRenameMenuItem": {
                click: this.onfilesRenameMenuitemClick
            },
            "#filesDeleteMenuItem": {
                click: this.onfilesDeleteMenuitemClick
            },
            "#filesCutMenuItem": {
                click: this.onfilesCutMenuitemClick
            },
            "#filesCopyMenuItem": {
                click: this.onfilesCopyMenuitemClick
            },
            "#filesPasteMenuItem": {
                click: this.onfilesPasteMenuitemClick
            }
        });
    }

});
