/*
 * File: app/view/RegInstanceWindow.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.RegInstanceWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.RegInstanceWindow',

    requires: [
        'Ext.form.Panel',
        'Ext.form.field.Display',
        'Ext.XTemplate',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Hidden',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button'
    ],

    height: 390,
    id: 'regInstanceWindow1',
    width: 450,
    layout: 'border',
    title: 'Create Instance',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    flex: 1,
                    region: 'center',
                    header: false,
                    title: 'regInstancePanel',
                    items: [
                        {
                            xtype: 'form',
                            id: 'instanceForm',
                            itemId: 'instanceForm',
                            bodyPadding: 15,
                            fieldDefaults: {
                                msgTarget: 'side',
                                labelWidth: 130
                            },
                            items: [
                                {
                                    xtype: 'displayfield',
                                    anchor: '100%',
                                    hidden: true,
                                    padding: '0 0 15 0',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'RHEM Manager',
                                    labelWidth: 130,
                                    name: 'displayHypervisor',
                                    value: 'Display Field'
                                },
                                {
                                    xtype: 'combobox',
                                    anchor: '100%',
                                    padding: '0 0 15 0',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'RHEM Manager',
                                    labelWidth: 130,
                                    name: 'hypervisorId',
                                    allowBlank: false,
                                    displayField: 'rhevmName',
                                    store: 'ComboHypervisorStore',
                                    valueField: 'hypervisorId',
                                    listeners: {
                                        change: {
                                            fn: me.onComboboxChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    anchor: '100%',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Data Center',
                                    labelWidth: 130,
                                    name: 'dataCenter',
                                    allowBlank: false,
                                    displayField: 'name',
                                    valueField: 'id',
                                    listeners: {
                                        change: {
                                            fn: me.onComboboxChange1,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    anchor: '100%',
                                    padding: '0 0 15 0',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Host Cluster',
                                    labelWidth: 130,
                                    name: 'cluster',
                                    allowBlank: false,
                                    displayField: 'name',
                                    valueField: 'name'
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Name',
                                    labelWidth: 130,
                                    name: 'name',
                                    allowBlank: false,
                                    vtype: 'template'
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Description',
                                    labelWidth: 130,
                                    name: 'description',
                                    allowBlank: false
                                },
                                {
                                    xtype: 'displayfield',
                                    anchor: '100%',
                                    hidden: true,
                                    padding: '0 0 15 0',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Based on Template',
                                    labelWidth: 130,
                                    name: 'displayTemplate',
                                    value: 'Display Field'
                                },
                                {
                                    xtype: 'combobox',
                                    anchor: '100%',
                                    padding: '0 0 15 0',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Based on Template',
                                    labelWidth: 130,
                                    name: 'template',
                                    allowBlank: false,
                                    displayField: 'name',
                                    valueField: 'templateId',
                                    listeners: {
                                        select: {
                                            fn: me.onComboboxSelect,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Memory Size(MB)',
                                    labelWidth: 130,
                                    name: 'memory',
                                    allowBlank: false,
                                    vtype: 'numeric'
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Total Virtual CPUs',
                                    labelWidth: 130,
                                    name: 'sockets',
                                    allowBlank: false,
                                    vtype: 'numeric'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    anchor: '100%',
                                    fieldLabel: 'Label',
                                    name: 'cores'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    anchor: '100%',
                                    fieldLabel: 'Label',
                                    name: 'initTemplate'
                                }
                            ]
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            ui: 'footer',
                            layout: {
                                type: 'hbox',
                                pack: 'center'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var instanceForm = Ext.getCmp("instanceForm");

                                        instanceForm.getForm().submit({
                                            clientValidation: true,
                                            url: GLOBAL.urlPrefix + "rhevm/vms/create",
                                            method : "POST",
                                            params: {
                                                newStatus: 'delivered'
                                            },
                                            waitMsg: 'Saving Data...',
                                            success: function(form, action) {
                                                Ext.Msg.alert('Success', action.result.msg);

                                                Ext.getCmp('instancesGrid').getStore().load();

                                                instanceForm.up('window').close();
                                            },
                                            failure: function(form, action) {
                                                switch (action.failureType) {
                                                    case Ext.form.action.Action.CLIENT_INVALID:
                                                    Ext.Msg.alert('Failure', '유효하지 않은 입력값이 존재합니다.');
                                                    break;
                                                    case Ext.form.action.Action.CONNECT_FAILURE:
                                                    Ext.Msg.alert('Failure', 'Server communication failed');
                                                    break;
                                                    case Ext.form.action.Action.SERVER_INVALID:
                                                    Ext.Msg.alert('Failure', action.result.msg);
                                                }
                                            }
                                        });
                                    },
                                    id: 'instanceCreateBtn3',
                                    itemId: 'instanceCreateBtn',
                                    margin: '0 15 0 0',
                                    padding: '2 10 2 10',
                                    text: 'OK'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        Ext.MessageBox.confirm('Confirm', '작업을 취소하시겠습니까?', function(btn){

                                            if(btn == "yes"){
                                                button.up("window").close();
                                            }

                                        });

                                    },
                                    id: 'instanceCancelBtn3',
                                    itemId: 'instanceCancelBtn',
                                    margin: '0 0 0 0',
                                    padding: '2 5 2 5',
                                    text: 'Cancel'
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {

        var form = field.up('form').getForm();

        var dataCenter = field.up('form').getForm().findField("dataCenter");
        var dateCenterStore = Ext.getStore("ComboDataCenterStore");

        var template = form.findField("template");
        var templateStore = Ext.getStore("ComboTemplateStore");

        dataCenter.setValue("");

        form.findField("cluster").setValue("");

        dataCenter.bindStore(dateCenterStore);

        dateCenterStore.getProxy().extraParams = {
            hypervisorId : newValue
        };
        dateCenterStore.load();

        if(form.findField("displayTemplate").getValue() != "") {

            template.setValue("");
            form.findField("memory").setValue("");
            form.findField("sockets").setValue("");

            template.bindStore(templateStore);

            templateStore.getProxy().extraParams = {
                hypervisorId : newValue
            };
            templateStore.load();

        }
    },

    onComboboxChange1: function(field, newValue, oldValue, eOpts) {
        if(newValue != '') {

            var cluster = field.up('form').getForm().findField("cluster");
            var clusterStore = Ext.getStore("ComboClusterStore");

            cluster.bindStore(clusterStore);

            clusterStore.getProxy().extraParams = {
                hypervisorId : field.up('form').getForm().findField("hypervisorId").getValue(),
                dataCenterId : newValue
            };
            clusterStore.load();

            cluster.setValue("");

        }
    },

    onComboboxSelect: function(combo, records, eOpts) {
        combo.up('form').getForm().findField("memory").setValue(records[0].get("memory"));
        combo.up('form').getForm().findField("sockets").setValue(records[0].get("sockets"));
        combo.up('form').getForm().findField("cores").setValue("1");

    }

});