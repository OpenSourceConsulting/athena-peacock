/*
 * File: app/view/almProjectWindow.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.almProjectWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.almProjectWindow',

    requires: [
        'Ext.form.Panel',
        'Ext.form.field.Text',
        'Ext.XTemplate',
        'Ext.form.field.Hidden',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button'
    ],

    height: 230,
    id: 'almProjectWindow',
    itemId: 'almProjectWindow',
    width: 400,
    resizable: false,
    layout: 'border',
    title: 'Create Project',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    flex: 1,
                    region: 'center',
                    header: false,
                    title: 'projectPanel',
                    items: [
                        {
                            xtype: 'form',
                            id: 'userForm1',
                            itemId: 'userForm',
                            bodyPadding: 15,
                            fieldDefaults: {
                                msgTarget: 'side',
                                labelWidth: 120
                            },
                            waitMsgTarget: true,
                            items: [
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Project Code',
                                    name: 'loginId',
                                    allowBlank: false
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    padding: '',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Project Name',
                                    name: 'userName',
                                    allowBlank: false
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    margin: '0 0 15 0',
                                    padding: '',
                                    fieldLabel: 'Project Description',
                                    name: 'deptName'
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    padding: '',
                                    fieldLabel: 'Group Description',
                                    name: 'email'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    anchor: '100%',
                                    fieldLabel: 'Label',
                                    name: 'userId'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    anchor: '100%',
                                    fieldLabel: 'Label',
                                    name: 'editType'
                                }
                            ]
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            ui: 'footer',
                            layout: {
                                type: 'hbox',
                                pack: 'center'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var userForm = Ext.getCmp("userForm");

                                        var action = GLOBAL.urlPrefix + "user/create";
                                        var editType = userForm.getForm().findField("editType").getValue();

                                        var userId = null;
                                        if(userForm.getForm().findField("userId").getValue() > 0){
                                            action = GLOBAL.urlPrefix + "user/update";
                                            userId = userForm.getForm().findField("userId").getValue();
                                        }

                                        userForm.getForm().submit({
                                            clientValidation: true,
                                            url: action,
                                            params: {
                                                newStatus: 'delivered'
                                            },
                                            waitMsg: 'Saving Data...',
                                            success: function(form, action) {
                                                Ext.Msg.alert('Success', action.result.msg);

                                                if(editType != 'myAccount') {

                                                    Ext.getCmp('userGrid').getStore().load({

                                                        callback:function(records, operation, success){

                                                            if(userId){

                                                                Ext.each(records, function(record) {

                                                                    if(record.get("userId") == userId) {
                                                                        Ext.getCmp('userGrid').getSelectionModel().select(record,true,false);

                                                                        userConstants.selectRow = record;
                                                                        userConstants.me.searchUserDetail();
                                                                    }

                                                                });
                                                            }
                                                        }
                                                    });
                                                }

                                                userForm.up('window').close();
                                            },
                                            failure: function(form, action) {
                                                switch (action.failureType) {
                                                    case Ext.form.action.Action.CLIENT_INVALID:
                                                    Ext.Msg.alert('Failure', '유효하지 않은 입력값이 존재합니다.');
                                                    break;
                                                    case Ext.form.action.Action.CONNECT_FAILURE:
                                                    Ext.Msg.alert('Failure', 'Server communication failed');
                                                    break;
                                                    case Ext.form.action.Action.SERVER_INVALID:
                                                    Ext.Msg.alert('Failure', action.result.msg);
                                                }
                                            }
                                        });
                                    },
                                    id: 'userSaveBtn1',
                                    itemId: 'userSaveBtn',
                                    margin: '0 15 0 0',
                                    padding: '2 5 2 5',
                                    text: 'Create'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        Ext.MessageBox.confirm('Confirm', '작업을 취소하시겠습니까?', function(btn){

                                            if(btn == "yes"){
                                                button.up("window").close();
                                            }

                                        });

                                    },
                                    margin: '0 0 0 0',
                                    padding: '2 5 2 5',
                                    text: 'Cancel'
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    }

});