/*
 * File: app/view/NewPermissionWindow.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.NewPermissionWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.NewPermissionWindow',

    requires: [
        'Ext.form.Panel',
        'Ext.form.field.Text',
        'Ext.tree.Panel',
        'Ext.tree.View',
        'Ext.tree.Column',
        'Ext.grid.column.CheckColumn',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button'
    ],

    height: 430,
    width: 500,
    resizable: false,
    title: 'New Permission',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    padding: '10 10 0 10',
                    bodyPadding: 10,
                    header: false,
                    title: 'My Form',
                    items: [
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            margin: '0 0 10 0',
                            fieldLabel: 'Permission Name',
                            labelWidth: 120,
                            name: 'permNm'
                        }
                    ]
                },
                {
                    xtype: 'treepanel',
                    getRecords: function() {
                        var current = 0;
                        var records = [];
                        return (function find(nodes) {
                            var i, len = nodes.length;
                            for (i = 0; i < len; i++) {
                                records.push(nodes[i]);
                                current++;
                                var found = find(nodes[i].childNodes);
                            }

                            return records;

                        }(this.store.getRootNode().childNodes));

                    },
                    plugins: [
                        Ext.create('Ext.grid.plugin.CellEditing',
                        {
                            
                        })
                    ],
                    frame: true,
                    height: 270,
                    id: 'allMenuTreeGrid',
                    itemId: 'allMenuTreeGrid',
                    margin: '5 20 10 20',
                    width: 445,
                    autoScroll: true,
                    header: false,
                    title: 'My Tree Grid Panel',
                    columnLines: true,
                    forceFit: false,
                    rowLines: true,
                    store: 'allMenuTreeStore',
                    rootVisible: false,
                    viewConfig: {

                    },
                    columns: [
                        {
                            xtype: 'treecolumn',
                            dataIndex: 'menuNm',
                            groupable: false,
                            text: 'Menu',
                            flex: 5
                        },
                        {
                            xtype: 'checkcolumn',
                            dataIndex: 'isRead',
                            menuDisabled: true,
                            text: 'Read',
                            flex: 1,
                            stopSelection: false,
                            listeners: {
                                checkchange: {
                                    fn: me.onCheckcolumnCheckChange2,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'checkcolumn',
                            dataIndex: 'isWrite',
                            text: 'Write',
                            flex: 1,
                            listeners: {
                                checkchange: {
                                    fn: me.onCheckcolumnCheckChange11,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    ui: 'footer',
                    layout: {
                        type: 'hbox',
                        pack: 'center'
                    },
                    items: [
                        {
                            xtype: 'button',
                            handler: function(button, e) {
                                var projectForm = Ext.getCmp("addProjectForm");

                                if(projectForm.isValid()) {

                                    var wizardData = {};

                                    var spaceStore = Ext.getCmp("wizardSelectSpaceGrid").getStore();
                                    var userStore = Ext.getCmp("wizardSelectUserGrid").getStore();

                                    wizardData.project = projectForm.getForm().getFieldValues();

                                    if(spaceStore.getCount() > 0 ) {

                                        var spaceItems = [];
                                        Ext.each(Ext.pluck(spaceStore.data.items, 'data'), function(item) {
                                            var spaceItem = {};
                                            spaceItem.mappingCode = item.key;
                                            spaceItem.mappingType = "10";

                                            spaceItems.push(spaceItem);
                                        });

                                        wizardData.confluence = spaceItems;
                                    }

                                    if(userStore.getCount() > 0 ) {
                                        wizardData.users = Ext.pluck(userStore.data.items, 'data');
                                    }

                                    Ext.Ajax.request({
                                        url: GLOBAL.urlPrefix + "alm/project/wizard",
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        waitMsg: 'Create Project...',
                                        jsonData: wizardData,
                                        success: function (response) {

                                            var responseData = Ext.JSON.decode(response.responseText);

                                            if(responseData.success) {

                                                Ext.Msg.alert('Success', responseData.msg);

                                                Ext.getCmp('almProjectGrid').getStore().reload();
                                                projectForm.up('window').close();

                                            } else {

                                                Ext.Msg.alert('Failure', responseData.msg);

                                            }

                                        },
                                        failure: function (response) {
                                            var msg = Ext.JSON.decode(response.responseText).msg;

                                            Ext.Msg.alert('Failure', msg);
                                        }
                                    });

                                }

                            },
                            margin: '0 15 0 0',
                            padding: '2 5 2 5',
                            text: 'Save'
                        },
                        {
                            xtype: 'button',
                            handler: function(button, e) {
                                Ext.MessageBox.confirm('Confirm', '작업을 취소하시겠습니까?', function(btn){

                                    if(btn == "yes"){
                                        button.up("window").close();
                                    }

                                });

                            },
                            margin: '0 0 0 0',
                            padding: '2 5 2 5',
                            text: 'Cancel'
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onCheckcolumnCheckChange2: function(checkcolumn, rowIndex, checked, eOpts) {
        userConstants.me.changeMenuAuth(Ext.getCmp("allMenuTreeGrid"), "isRead");
    },

    onCheckcolumnCheckChange11: function(checkcolumn, rowIndex, checked, eOpts) {
        userConstants.me.changeMenuAuth(Ext.getCmp("allMenuTreeGrid"), "isWrite");
    }

});