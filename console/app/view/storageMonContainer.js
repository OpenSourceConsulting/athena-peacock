/*
 * File: app/view/storageMonContainer.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.storageMonContainer', {
    extend: 'Ext.container.Container',
    alias: 'widget.storageMonContainer',

    requires: [
        'Ext.grid.Panel',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.grid.View',
        'Ext.grid.column.Column',
        'Ext.XTemplate'
    ],

    id: 'storageMonContainer',
    itemId: 'storageMonContainer',
    layout: 'border',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'gridpanel',
                    flex: 3,
                    region: 'center',
                    id: 'storageMonGrid',
                    itemId: 'storageMonGrid',
                    columnLines: true,
                    forceFit: true,
                    store: 'storageMonJsonStore',
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            height: 36,
                            id: 'storageMonToolbar',
                            itemId: 'storageMonToolbar',
                            items: [
                                {
                                    xtype: 'button',
                                    id: 'storageMonAdd',
                                    itemId: 'storageMonAdd',
                                    padding: '3 10 3 10',
                                    text: 'Add MON'
                                }
                            ]
                        }
                    ],
                    viewConfig: {
                        id: 'storageMonGridView',
                        itemId: 'storageMonGridView'
                    },
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'name',
                            text: 'Name'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'server',
                            text: 'Server'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'ip',
                            text: 'Ip'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if (value === true) {
                                    return "<img src='resources/images/grid/drop-yes.png'>";
                                } else {
                                    return "<img src='resources/images/grid/drop-no.png'>";
                                }
                            },
                            align: 'center',
                            dataIndex: 'in_quorum',
                            text: 'In_quorum'
                        }
                    ]
                },
                {
                    xtype: 'panel',
                    flex: 2,
                    region: 'south',
                    split: true,
                    id: 'storageMonDetail',
                    itemId: 'storageMonDetail',
                    tpl: [
                        '<table border=0>',
                        '<tpl for=".">',
                        '<tr>',
                        '<td>{name}</td>',
                        '<td>&nbsp;</td>',
                        '</tr>',
                        '<tr>',
                        '<td align=right>',
                        'Avail Percent :<br>',
                        'Size Total(K) :<br>',
                        'Size Avail(K) :<br>',
                        'Size Used(K) :<br>',
                        'Health :<br>',
                        '<br>',
                        '</td>',
                        '<td align=right>',
                        '{avail_percent:number(\'0,000\')} % <br>',
                        '{kb_total:number(\'0,000\')} K <br>',
                        '{kb_avail:number(\'0,000\')} K <br>',
                        '{kb_used:number(\'0,000\')} K <br>',
                        '{health} <br>',
                        '<br>',
                        '</td>',
                        '</tr>',
                        '</tpl>',
                        '</table>',
                        ''
                    ],
                    autoScroll: true,
                    layout: 'border',
                    bodyPadding: 10,
                    bodyStyle: {
                        background: '#fff'
                    }
                }
            ]
        });

        me.callParent(arguments);
    }

});