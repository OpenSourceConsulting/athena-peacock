/*
 * File: app/view/RegAccountWindow.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.RegAccountWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.RegAccountWindow',

    requires: [
        'Ext.form.Panel',
        'Ext.XTemplate',
        'Ext.form.field.Checkbox',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Hidden',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button'
    ],

    height: 425,
    id: 'regAccountWindow',
    width: 470,
    resizable: false,
    layout: 'border',
    title: 'Create Account',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    flex: 1,
                    region: 'center',
                    header: false,
                    title: 'accountPanel',
                    items: [
                        {
                            xtype: 'form',
                            height: 345,
                            id: 'accountForm',
                            itemId: 'accountForm',
                            bodyPadding: 15,
                            fieldDefaults: {
                                msgTarget: 'side',
                                labelWidth: 120
                            },
                            items: [
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Account ID',
                                    name: 'account',
                                    allowBlank: false,
                                    enableKeyEvents: true,
                                    vtype: 'template',
                                    listeners: {
                                        keyup: {
                                            fn: me.onTextfieldKeyup,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Passward',
                                    name: 'passwd',
                                    inputType: 'password',
                                    allowBlank: false
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    padding: '',
                                    afterLabelTextTpl: [
                                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                                    ],
                                    fieldLabel: 'Confirm Password',
                                    name: 'confirmPasswd',
                                    inputType: 'password',
                                    allowBlank: false,
                                    vtype: 'password'
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    fieldLabel: 'Home Dir',
                                    name: 'homeDir',
                                    value: '/home/'
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    fieldLabel: 'Shell',
                                    name: 'shell',
                                    value: '/bin/bash'
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    fieldLabel: 'UID',
                                    name: 'uid',
                                    vtype: 'numeric'
                                },
                                {
                                    xtype: 'checkboxfield',
                                    fieldLabel: 'Group',
                                    name: 'checkGroup',
                                    boxLabel: 'Use initial login group',
                                    inputValue: 'Y',
                                    uncheckedValue: 'N',
                                    listeners: {
                                        change: {
                                            fn: me.onCheckboxfieldChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    anchor: '100%',
                                    disabled: true,
                                    padding: '0 0 0 125',
                                    fieldLabel: '',
                                    labelSeparator: ' ',
                                    labelWidth: 120,
                                    name: 'group',
                                    displayField: 'group',
                                    store: 'ComboGroupStore',
                                    valueField: 'group'
                                },
                                {
                                    xtype: 'checkboxfield',
                                    fieldLabel: 'Groups',
                                    name: 'checkGroup2',
                                    boxLabel: 'Use supplementary groups',
                                    inputValue: 'Y',
                                    uncheckedValue: 'N',
                                    listeners: {
                                        change: {
                                            fn: me.onCheckboxfieldChange1,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    anchor: '100%',
                                    disabled: true,
                                    padding: '0 0 0 125',
                                    fieldLabel: '',
                                    labelSeparator: ' ',
                                    labelWidth: 120,
                                    name: 'groups',
                                    displayField: 'group',
                                    multiSelect: true,
                                    store: 'ComboGroupStore',
                                    valueField: 'group'
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    fieldLabel: 'Comment',
                                    name: 'comment'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    anchor: '100%',
                                    fieldLabel: 'Label',
                                    name: 'machineId'
                                }
                            ]
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            ui: 'footer',
                            layout: {
                                type: 'hbox',
                                pack: 'center'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var accountForm = Ext.getCmp("accountForm");

                                        accountForm.getForm().submit({
                                            clientValidation: true,
                                            url: GLOBAL.urlPrefix + "machine/createAccount",
                                            method : "POST",
                                            params: {
                                                newStatus: 'delivered'
                                            },
                                            waitMsg: 'Saving Data...',
                                            success: function(form, action) {
                                                Ext.Msg.alert('Success', action.result.msg);

                                                Ext.getCmp('instanceAccountGrid').getStore().load();

                                                accountForm.up('window').close();
                                            },
                                            failure: function(form, action) {
                                                switch (action.failureType) {
                                                    case Ext.form.action.Action.CLIENT_INVALID:
                                                    Ext.Msg.alert('Failure', '유효하지 않은 입력값이 존재합니다.');
                                                    break;
                                                    case Ext.form.action.Action.CONNECT_FAILURE:
                                                    Ext.Msg.alert('Failure', 'Server communication failed');
                                                    break;
                                                    case Ext.form.action.Action.SERVER_INVALID:
                                                    Ext.Msg.alert('Failure', action.result.msg);
                                                }
                                            }
                                        });
                                    },
                                    itemId: '',
                                    margin: '0 15 0 0',
                                    padding: '2 5 2 5',
                                    text: 'Create'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        Ext.MessageBox.confirm('Confirm', '작업을 취소하시겠습니까?', function(btn){

                                            if(btn == "yes"){
                                                button.up("window").close();
                                            }

                                        });

                                    },
                                    margin: '0 0 0 0',
                                    padding: '2 5 2 5',
                                    text: 'Cancel'
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onTextfieldKeyup: function(textfield, e, eOpts) {
        var form = textfield.up('form').getForm();

        var dirField = form.findField('homeDir');
        if(dirField.getValue().indexOf('/home/') == 0) {
            dirField.setValue('/home/' + textfield.getValue());
        }
    },

    onCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        if(newValue == true) {
            field.up('form').getForm().findField('group').setDisabled(false);
        } else {
            field.up('form').getForm().findField('group').setDisabled(true);
        }
    },

    onCheckboxfieldChange1: function(field, newValue, oldValue, eOpts) {
        if(newValue == true) {
            field.up('form').getForm().findField('groups').setDisabled(false);
        } else {
            field.up('form').getForm().findField('groups').setDisabled(true);
        }
    }

});