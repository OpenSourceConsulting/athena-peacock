/*
 * File: app/view/dashboardContainer.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.dashboardContainer', {
    extend: 'Ext.container.Container',
    alias: 'widget.dashboardcontainer',

    requires: [
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Number',
        'Ext.chart.Chart',
        'Ext.chart.axis.Category',
        'Ext.chart.axis.Numeric',
        'Ext.chart.series.Bar',
        'Ext.chart.Legend'
    ],

    height: 755,
    id: 'dashboardContainer',
    itemId: 'dashboardContainer',
    style: 'background-color:#ffffff;',
    width: 1000,
    autoScroll: true,

    layout: {
        type: 'vbox',
        align: 'stretch'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'gridpanel',
                    flex: 1,
                    frame: true,
                    id: 'serverSummaryGrid',
                    itemId: 'serverSummaryGrid',
                    margin: '10 10 5 10',
                    minHeight: 150,
                    title: 'Server Summary',
                    columnLines: true,
                    forceFit: true,
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            minWidth: 150,
                            dataIndex: 'field1',
                            text: 'RHEV Manager'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                metaData.tdAttr = 'style="cursor: pointer;"';
                                return value;
                            },
                            minWidth: 70,
                            dataIndex: 'field2',
                            text: 'VMs (up)'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                metaData.tdAttr = 'style="cursor: pointer;"';
                                return value;
                            },
                            minWidth: 70,
                            dataIndex: 'field3',
                            text: 'Templates'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                metaData.tdAttr = 'style="cursor: pointer;"';
                                return value;
                            },
                            minWidth: 100,
                            dataIndex: 'field4',
                            text: 'Agent (Running)'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                metaData.tdAttr = 'style="cursor: pointer;"';
                                return value;
                            },
                            minWidth: 180,
                            dataIndex: 'field5',
                            text: 'Critical (CPU / Memory / Disk)'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                metaData.tdAttr = 'style="cursor: pointer;"';
                                return value;
                            },
                            minWidth: 180,
                            dataIndex: 'field6',
                            text: 'Warning (CPU / Memory / Disk)'
                        }
                    ],
                    listeners: {
                        cellclick: {
                            fn: me.onServerSummaryGridCellClick,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'gridpanel',
                    frame: true,
                    id: 'projectSummaryGrid',
                    itemId: 'projectSummaryGrid',
                    margin: '5 10 5 10',
                    maxHeight: 100,
                    title: 'Project Summary',
                    columnLines: true,
                    forceFit: true,
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            minWidth: 100,
                            dataIndex: 'field1',
                            text: 'Project Summary',
                            format: '0,000'
                        },
                        {
                            xtype: 'numbercolumn',
                            minWidth: 100,
                            dataIndex: 'field2',
                            text: 'SVN Repository',
                            format: '0,000'
                        },
                        {
                            xtype: 'numbercolumn',
                            minWidth: 100,
                            dataIndex: 'field3',
                            text: 'Jenkins Job',
                            format: '0,000'
                        }
                    ],
                    viewConfig: {
                        autoScroll: false
                    }
                },
                {
                    xtype: 'gridpanel',
                    frame: true,
                    id: 'swSummaryGrid',
                    itemId: 'swSummaryGrid',
                    margin: '5 10 5 10',
                    maxHeight: 100,
                    title: 'S/W Summary',
                    columnLines: true,
                    forceFit: true,
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            minWidth: 100,
                            dataIndex: 'field1',
                            text: 'JBoss EWS(Httpd)',
                            format: '0,000'
                        },
                        {
                            xtype: 'numbercolumn',
                            minWidth: 100,
                            dataIndex: 'field2',
                            text: 'JBoss EWS(Tomcat)',
                            format: '0,000'
                        },
                        {
                            xtype: 'numbercolumn',
                            minWidth: 100,
                            dataIndex: 'field3',
                            text: 'JBoss  EAP',
                            format: '0,000'
                        }
                    ],
                    viewConfig: {
                        autoScroll: false
                    }
                },
                {
                    xtype: 'panel',
                    flex: 2,
                    frame: true,
                    margin: '5 10 10 10',
                    minHeight: 300,
                    padding: 10,
                    header: false,
                    title: 'My Panel',
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'panel',
                            flex: 1,
                            header: false,
                            title: 'My Panel',
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'chart',
                                    flex: 1,
                                    height: 250,
                                    html: 'Top 5 Servers by % CPU Used',
                                    margin: '10 0 10 0',
                                    minWidth: 300,
                                    padding: '',
                                    style: 'font-size: 14px;font-weight: bold;text-align: center;',
                                    width: 356,
                                    shadow: false,
                                    animate: true,
                                    insetPadding: 20,
                                    store: 'tempChartData',
                                    axes: [
                                        {
                                            type: 'Category',
                                            fields: [
                                                'cate'
                                            ],
                                            label: {
                                                renderer: function(v) {
                                                    if(v.length > 10) {
                                                        return v.substring(0, 10) + "..";
                                                    } else {
                                                        return v;
                                                    }
                                                }
                                            },
                                            position: 'left'
                                        },
                                        {
                                            type: 'Numeric',
                                            fields: [
                                                'cpu1',
                                                'cpu2'
                                            ],
                                            position: 'bottom',
                                            maximum: 100,
                                            minimum: 0
                                        }
                                    ],
                                    series: [
                                        {
                                            type: 'bar',
                                            title: [
                                                'Used CPU',
                                                'Free CPU'
                                            ],
                                            axis: 'bottom',
                                            xField: 'cate',
                                            yField: [
                                                'cpu1',
                                                'cpu2'
                                            ],
                                            stacked: true
                                        }
                                    ],
                                    legend: {

                                    }
                                },
                                {
                                    xtype: 'chart',
                                    flex: 1,
                                    height: 250,
                                    html: 'Top 5 Servers by % Memory Used',
                                    margin: '10 0 10 0',
                                    minWidth: 300,
                                    padding: '',
                                    style: 'font-size: 14px;font-weight: bold;text-align: center;',
                                    width: 356,
                                    shadow: false,
                                    insetPadding: 20,
                                    store: 'tempChartData',
                                    axes: [
                                        {
                                            type: 'Category',
                                            fields: [
                                                'cate'
                                            ],
                                            label: {
                                                renderer: function(v) {
                                                    if(v.length > 10) {
                                                        return v.substring(0, 10) + "..";
                                                    } else {
                                                        return v;
                                                    }
                                                }
                                            },
                                            position: 'left'
                                        },
                                        {
                                            type: 'Numeric',
                                            fields: [
                                                'memory1',
                                                'memory2'
                                            ],
                                            position: 'bottom',
                                            maximum: 100,
                                            minimum: 0
                                        }
                                    ],
                                    series: [
                                        {
                                            type: 'bar',
                                            title: [
                                                'Used Memory',
                                                'Free Memory'
                                            ],
                                            axis: 'bottom',
                                            xField: 'cate',
                                            yField: [
                                                'memory1',
                                                'memory2'
                                            ],
                                            stacked: true
                                        }
                                    ],
                                    legend: {

                                    }
                                },
                                {
                                    xtype: 'chart',
                                    flex: 1,
                                    height: 250,
                                    html: 'Top 5 Servers by % Storage Used',
                                    margin: '10 0 10 0',
                                    minWidth: 300,
                                    padding: '',
                                    style: 'font-size: 14px;font-weight: bold;text-align: center;',
                                    width: 356,
                                    shadow: false,
                                    animate: true,
                                    insetPadding: 20,
                                    store: 'tempChartData',
                                    axes: [
                                        {
                                            type: 'Category',
                                            fields: [
                                                'cate'
                                            ],
                                            label: {
                                                renderer: function(v) {
                                                    if(v.length > 10) {
                                                        return v.substring(0, 10) + "..";
                                                    } else {
                                                        return v;
                                                    }
                                                }
                                            },
                                            position: 'left'
                                        },
                                        {
                                            type: 'Numeric',
                                            fields: [
                                                'storage1',
                                                'storage2'
                                            ],
                                            position: 'bottom',
                                            maximum: 100,
                                            minimum: 0
                                        }
                                    ],
                                    series: [
                                        {
                                            type: 'bar',
                                            title: [
                                                'Used Storage',
                                                'Free Storage'
                                            ],
                                            axis: 'bottom',
                                            xField: 'cate',
                                            yField: [
                                                'storage1',
                                                'storage2'
                                            ],
                                            stacked: true
                                        }
                                    ],
                                    legend: {

                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onServerSummaryGridCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        var window;
        var store;
        if(cellIndex == 1) {

            window = Ext.create("widget.VmSummaryWindow");
            window.show();


            store = Ext.create('Ext.data.Store', {
                alias: 'store.ModeStore0',
                autoLoad: false,
                fields: [{
                    name: 'field1',
                    type: 'string'
                }, {
                    name: 'field2',
                    type: 'string'
                }, {
                    name: 'field3',
                    type: 'string'
                }],
                data: [
                    { field1 : "Peacock Svr-1", field2 : "192.168.0.2", field3 : "Up"},
                    { field1 : "Peacock Svr-2", field2 : "192.168.0.3", field3 : "Up"},
                    { field1 : "Peacock Svr-3", field2 : "192.168.0.4", field3 : "Down"},
                    { field1 : "Peacock Svr-4", field2 : "192.168.0.5", field3 : "Down"},
                    { field1 : "Peacock Svr-5", field2 : "192.168.0.6", field3 : "Up"}
                ]
            });

            Ext.getCmp("vmSummaryGrid").getView().bindStore(store);


        } else if(cellIndex == 2) {

            window = Ext.create("widget.TemplateSummaryWindow");
            window.show();


            store = Ext.create('Ext.data.Store', {
                alias: 'store.ModeStore0',
                autoLoad: false,
                fields: [{
                    name: 'field1',
                    type: 'string'
                }, {
                    name: 'field2',
                    type: 'string'
                }, {
                    name: 'field3',
                    type: 'string'
                }],
                data: [
                    { field1 : "Peacock Template-1 ", field2 : ""},
                    { field1 : "Peacock Template-2 ", field2 : ""},
                    { field1 : "Peacock Template-3 ", field2 : ""},
                    { field1 : "Peacock Template-4 ", field2 : ""},
                    { field1 : "Peacock Template-5 ", field2 : ""}
                ]
            });

            Ext.getCmp("templateSummaryGrid").getView().bindStore(store);


        } else if(cellIndex == 3) {

            window = Ext.create("widget.AgentSummaryWindow");
            window.show();

            store = Ext.create('Ext.data.Store', {
                alias: 'store.ModeStore0',
                autoLoad: false,
                fields: [{
                    name: 'field1',
                    type: 'string'
                }, {
                    name: 'field2',
                    type: 'string'
                }, {
                    name: 'field3',
                    type: 'string'
                }],
                data: [
                    { field1 : "Peacock Svr-1", field2 : "192.168.0.2", field3 : "Running"},
                    { field1 : "Peacock Svr-2", field2 : "192.168.0.3", field3 : "Running"},
                    { field1 : "Peacock Svr-3", field2 : "192.168.0.4", field3 : "Down"},
                    { field1 : "Peacock Svr-4", field2 : "192.168.0.5", field3 : "Down"},
                    { field1 : "Peacock Svr-5", field2 : "192.168.0.6", field3 : "Running"}
                ]
            });

            Ext.getCmp("agentSummaryGrid").getView().bindStore(store);

        } else if(cellIndex == 4) {

            window = Ext.create("widget.AlarmCriticalWindow");
            window.show();

            store = Ext.create('Ext.data.Store', {
                alias: 'store.ModeStore0',
                autoLoad: false,
                fields: [{
                    name: 'field1',
                    type: 'string'
                }, {
                    name: 'field2',
                    type: 'string'
                }, {
                    name: 'field3',
                    type: 'string'
                }, {
                    name: 'field4',
                    type: 'string'
                }],
                data: [
                    { field1 : "Peacock Svr-1", field2 : "O", field3 : "", field4 : ""},
                    { field1 : "Peacock Svr-2", field2 : "", field3 : "O", field4 : ""}
                ]
            });

            Ext.getCmp("alarmCriticalGrid").getView().bindStore(store);

        } else if(cellIndex == 5) {

            window = Ext.create("widget.AlarmWarningWindow");
            window.show();

            store = Ext.create('Ext.data.Store', {
                alias: 'store.ModeStore0',
                autoLoad: false,
                fields: [{
                    name: 'field1',
                    type: 'string'
                }, {
                    name: 'field2',
                    type: 'string'
                }, {
                    name: 'field3',
                    type: 'string'
                },  {
                    name: 'field4',
                    type: 'string'
                }],
                data: [
                    { field1 : "Peacock Svr-3", field2 : "", field3 : "O", field4 : ""},
                    { field1 : "Peacock Svr-4", field2 : "", field3 : "", field4 : "O"},
                    { field1 : "Peacock Svr-5", field2 : "", field3 : "O", field4 : ""}
                ]
            });

            Ext.getCmp("alarmWarningGrid").getView().bindStore(store);

        }
    }

});